// tslint:disable
/// <reference path="./custom.d.ts" />

/**
 * 爱享到 API
 * 你可以通过这里来了解 [OpenAPI 的语法](https://swagger.io/docs/specification/about/)。还可以通过 [Best Practices in API Design](https://swagger.io/resources/articles/best-practices-in-api-design/) 了解设计 API 的最佳实践。     For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: zhujh@wangushengshi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://api.aixiangdao.tech/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AddAddress
 */
export interface AddAddress {
    /**
     * 联系人姓名
     * @type {string}
     * @memberof AddAddress
     */
    contactName?: string;
    /**
     * 联系人电话
     * @type {string}
     * @memberof AddAddress
     */
    contactMobile?: string;
    /**
     * 省份id
     * @type {number}
     * @memberof AddAddress
     */
    province?: number;
    /**
     * 城市id
     * @type {number}
     * @memberof AddAddress
     */
    city?: number;
    /**
     * 区域id
     * @type {number}
     * @memberof AddAddress
     */
    area?: number;
    /**
     * 详细地址
     * @type {string}
     * @memberof AddAddress
     */
    address?: string;
    /**
     * 是否设置为默认值（0：否；1：是）
     * @type {number}
     * @memberof AddAddress
     */
    isDefault?: number;
}

/**
 * 
 * @export
 * @interface AddAddressRes
 */
export interface AddAddressRes {
    /**
     * 地址id
     * @type {string}
     * @memberof AddAddressRes
     */
    id?: string;
}

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 地址id  更新地址的时候才需要传
     * @type {string}
     * @memberof Address
     */
    id?: string;
    /**
     * 联系人姓名
     * @type {string}
     * @memberof Address
     */
    contactName?: string;
    /**
     * 联系人电话
     * @type {string}
     * @memberof Address
     */
    contactMobile?: string;
    /**
     * 省份id
     * @type {number}
     * @memberof Address
     */
    province?: number;
    /**
     * 城市id
     * @type {number}
     * @memberof Address
     */
    city?: number;
    /**
     * 区域id
     * @type {number}
     * @memberof Address
     */
    area?: number;
    /**
     * 详细地址
     * @type {string}
     * @memberof Address
     */
    address?: string;
    /**
     * 是否设置为默认值（0：否；1：是）
     * @type {number}
     * @memberof Address
     */
    isDefault?: number;
    /**
     * 省份名
     * @type {string}
     * @memberof Address
     */
    provinceName?: string;
    /**
     * 城市名
     * @type {string}
     * @memberof Address
     */
    cityName?: string;
    /**
     * 区域名
     * @type {string}
     * @memberof Address
     */
    areaName?: string;
}

/**
 * 应用最新版本
 * @export
 * @interface ApplicationNewestVersion
 */
export interface ApplicationNewestVersion {
    /**
     * 最新主版本号
     * @type {number}
     * @memberof ApplicationNewestVersion
     */
    newFirstVersion?: number;
    /**
     * 最新功能版本号
     * @type {number}
     * @memberof ApplicationNewestVersion
     */
    newSecondVersion?: number;
    /**
     * 最新Bug版本号
     * @type {number}
     * @memberof ApplicationNewestVersion
     */
    newThirdVersion?: number;
    /**
     * 最低主版本号
     * @type {number}
     * @memberof ApplicationNewestVersion
     */
    lowerlimitFirstVersion?: number;
    /**
     * 最低功能版本号
     * @type {number}
     * @memberof ApplicationNewestVersion
     */
    lowerlimitSecondVersion?: number;
    /**
     * 最低Bug版本号
     * @type {number}
     * @memberof ApplicationNewestVersion
     */
    lowerlimitThirdVersion?: number;
    /**
     * 最新版本
     * @type {string}
     * @memberof ApplicationNewestVersion
     */
    newVersion?: string;
    /**
     * 最低版本号
     * @type {string}
     * @memberof ApplicationNewestVersion
     */
    lowerLimitVersion?: string;
    /**
     * 适用平台（0：全平台；1：Android；2：IOS）
     * @type {number}
     * @memberof ApplicationNewestVersion
     */
    platform?: number;
    /**
     * 更新内容
     * @type {string}
     * @memberof ApplicationNewestVersion
     */
    description?: string;
}

/**
 * 
 * @export
 * @interface Area
 */
export interface Area {
    /**
     * 区域ID
     * @type {string}
     * @memberof Area
     */
    id?: string;
    /**
     * 区域名称
     * @type {string}
     * @memberof Area
     */
    name?: string;
    /**
     * 城市ID
     * @type {string}
     * @memberof Area
     */
    cityId?: string;
    /**
     * 
     * @type {Array<Region>}
     * @memberof Area
     */
    regions?: Array<Region>;
}

/**
 * 
 * @export
 * @interface Banner
 */
export interface Banner {
    /**
     * ID
     * @type {string}
     * @memberof Banner
     */
    id?: string;
    /**
     * 名称
     * @type {string}
     * @memberof Banner
     */
    name?: string;
    /**
     * 链接地址
     * @type {string}
     * @memberof Banner
     */
    linkUrl?: string;
    /**
     * 封面图片路径
     * @type {string}
     * @memberof Banner
     */
    coverPath?: string;
}

/**
 * 
 * @export
 * @interface Body
 */
export interface Body {
    /**
     * 类型(2 - 获取注册登录验证码; 4 - 获取修改手机号验证码; 5-获取绑定新手机验证码; 6-重置密码获取验证码;11 -微信登陆获取验证码)
     * @type {number}
     * @memberof Body
     */
    type: Body.TypeEnum;
    /**
     * 手机号（仅限大陆地区）
     * @type {string}
     * @memberof Body
     */
    mobile: string;
}

/**
 * @export
 * @namespace Body
 */
export namespace Body {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        NUMBER_2 = <any> 2,
        NUMBER_4 = <any> 4,
        NUMBER_5 = <any> 5,
        NUMBER_6 = <any> 6,
        NUMBER_11 = <any> 11
    }
}

/**
 * 
 * @export
 * @interface updateUserInfoBody
 */
export interface updateUserInfoBody {
    /**
     * 用户名
     * @type {string}
     * @memberof updateUserInfoBody
     */
    name?: string;
    /**
     * 性别 1:男;2:女
     * @type {number}
     * @memberof updateUserInfoBody
     */
    sex?: updateUserInfoBody.SexEnum;
    /**
     * 生日 yyyy-MM-dd
     * @type {Date}
     * @memberof updateUserInfoBody
     */
    birthday?: Date;
}

/**
 * @export
 * @namespace updateUserInfoBody
 */
export namespace updateUserInfoBody {
    /**
     * @export
     * @enum {string}
     */
    export enum SexEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
}

/**
 * 
 * @export
 * @interface getPointsListBody
 */
export interface getPointsListBody {
    /**
     * 积分类型（0：全部；1：收入；2：支出）
     * @type {number}
     * @memberof getPointsListBody
     */
    pointsType?: number;
    /**
     * 分页索引
     * @type {number}
     * @memberof getPointsListBody
     */
    pageIndex?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof getPointsListBody
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface increaseUserPointsBody
 */
export interface increaseUserPointsBody {
    /**
     * 积分来源（0：签到；1：优惠买单；2商品买单）
     * @type {number}
     * @memberof increaseUserPointsBody
     */
    pointSource?: number;
    /**
     * 积分来源记录ID
     * @type {string}
     * @memberof increaseUserPointsBody
     */
    pointSourceId?: string;
    /**
     * 积分数量
     * @type {number}
     * @memberof increaseUserPointsBody
     */
    point?: number;
    /**
     * 用户ID
     * @type {string}
     * @memberof increaseUserPointsBody
     */
    userId?: string;
}

/**
 * 
 * @export
 * @interface getCityCategoriesBody
 */
export interface getCityCategoriesBody {
    /**
     * 城市id
     * @type {string}
     * @memberof getCityCategoriesBody
     */
    cityId: string;
}

/**
 * 
 * @export
 * @interface getCityByIdBody
 */
export interface getCityByIdBody {
    /**
     * 城市Id
     * @type {number}
     * @memberof getCityByIdBody
     */
    id?: number;
    /**
     * 城市名称
     * @type {number}
     * @memberof getCityByIdBody
     */
    name?: number;
    /**
     * 是否是热门城市
     * @type {any}
     * @memberof getCityByIdBody
     */
    isHot?: any;
}

/**
 * 
 * @export
 * @interface getCitiesByIdsBody
 */
export interface getCitiesByIdsBody {
    /**
     * 城市Id集合
     * @type {Array<number>}
     * @memberof getCitiesByIdsBody
     */
    cityInfoListRequest?: Array<number>;
}

/**
 * 
 * @export
 * @interface getLocationCityBody
 */
export interface getLocationCityBody {
    /**
     * 经度
     * @type {number}
     * @memberof getLocationCityBody
     */
    longitude?: number;
    /**
     * 纬度
     * @type {number}
     * @memberof getLocationCityBody
     */
    latitude?: number;
}

/**
 * 
 * @export
 * @interface getCityTopicsBody
 */
export interface getCityTopicsBody {
    /**
     * 城市id
     * @type {number}
     * @memberof getCityTopicsBody
     */
    cityId: number;
}

/**
 * 
 * @export
 * @interface getAppMerchantsBody
 */
export interface getAppMerchantsBody {
    /**
     * 城市ID
     * @type {string}
     * @memberof getAppMerchantsBody
     */
    cityId?: string;
    /**
     * 区域ID
     * @type {string}
     * @memberof getAppMerchantsBody
     */
    regionId?: string;
    /**
     * 距离(单位：m)
     * @type {number}
     * @memberof getAppMerchantsBody
     */
    distance?: number;
    /**
     * 分类ID
     * @type {string}
     * @memberof getAppMerchantsBody
     */
    categoryId?: string;
    /**
     * 经度(用户所在经度 或 地图Api返回的经度)
     * @type {number}
     * @memberof getAppMerchantsBody
     */
    longitude?: number;
    /**
     * 纬度(用户所在纬度 或 地图Api返回的纬度)
     * @type {number}
     * @memberof getAppMerchantsBody
     */
    latitude?: number;
    /**
     * 专题(场景)ID
     * @type {string}
     * @memberof getAppMerchantsBody
     */
    topicId?: string;
    /**
     * 搜索关键字类型(为\"default\"表示未选择推荐关键字)
     * @type {string}
     * @memberof getAppMerchantsBody
     */
    keywordType?: getAppMerchantsBody.KeywordTypeEnum;
    /**
     * 搜索关键字(包括商家ID、商家名称、分类（菜系）ID、商圈ID、菜名等)
     * @type {string}
     * @memberof getAppMerchantsBody
     */
    keyword?: string;
    /**
     * 排序字段(\"default\"-默认排序; \"averageConsume\"-人均消费; \"commentLevel\"-评分最高; \"monthOrderCount\"-月销量最高; \"distance\"-离我最近; \"sortOrder\"-店铺排序;)
     * @type {string}
     * @memberof getAppMerchantsBody
     */
    sortBy?: getAppMerchantsBody.SortByEnum;
    /**
     * 排序方式(\"desc\"-降序; \"asc\"-升序;)
     * @type {string}
     * @memberof getAppMerchantsBody
     */
    order?: getAppMerchantsBody.OrderEnum;
    /**
     * 是否为Plus店铺（0：非Plus店铺；1：Plus店铺）
     * @type {number}
     * @memberof getAppMerchantsBody
     */
    isPlus?: number;
    /**
     * 分页游标（初始值：0）
     * @type {number}
     * @memberof getAppMerchantsBody
     */
    pageIndex?: number;
    /**
     * 每页数目
     * @type {number}
     * @memberof getAppMerchantsBody
     */
    pageSize?: number;
}

/**
 * @export
 * @namespace getAppMerchantsBody
 */
export namespace getAppMerchantsBody {
    /**
     * @export
     * @enum {string}
     */
    export enum KeywordTypeEnum {
        Default = <any> 'default',
        Category = <any> 'category',
        Area = <any> 'area',
        Region = <any> 'region',
        Dish = <any> 'dish',
        Merchant = <any> 'merchant'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum SortByEnum {
        Default = <any> 'default',
        AverageConsume = <any> 'averageConsume',
        CommentLevel = <any> 'commentLevel',
        MonthOrderCount = <any> 'monthOrderCount',
        Distance = <any> 'distance',
        SortOrder = <any> 'sortOrder'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum OrderEnum {
        Desc = <any> 'desc',
        Asc = <any> 'asc'
    }
}

/**
 * 
 * @export
 * @interface getAppMerchantDetailBody
 */
export interface getAppMerchantDetailBody {
    /**
     * 商家ID
     * @type {string}
     * @memberof getAppMerchantDetailBody
     */
    merchantId: string;
    /**
     * 经度
     * @type {number}
     * @memberof getAppMerchantDetailBody
     */
    longitude?: number;
    /**
     * 纬度
     * @type {number}
     * @memberof getAppMerchantDetailBody
     */
    latitude?: number;
}

/**
 * 
 * @export
 * @interface getMerchantDescBody
 */
export interface getMerchantDescBody {
    /**
     * 商家ID
     * @type {string}
     * @memberof getMerchantDescBody
     */
    merchantId: string;
}

/**
 * 
 * @export
 * @interface updateLoginPasswordBody
 */
export interface updateLoginPasswordBody {
    /**
     * 密码
     * @type {string}
     * @memberof updateLoginPasswordBody
     */
    oldPassword: string;
    /**
     * 密码
     * @type {string}
     * @memberof updateLoginPasswordBody
     */
    newPassword: string;
}

/**
 * 
 * @export
 * @interface getMerchantAttachmentsBody
 */
export interface getMerchantAttachmentsBody {
    /**
     * 商家ID
     * @type {string}
     * @memberof getMerchantAttachmentsBody
     */
    merchantId: string;
}

/**
 * 
 * @export
 * @interface getMerchantDishesBody
 */
export interface getMerchantDishesBody {
    /**
     * 商家ID
     * @type {string}
     * @memberof getMerchantDishesBody
     */
    merchantId: string;
}

/**
 * 
 * @export
 * @interface getMerchantServicesBody
 */
export interface getMerchantServicesBody {
    /**
     * 商家ID
     * @type {string}
     * @memberof getMerchantServicesBody
     */
    merchantId: string;
}

/**
 * 
 * @export
 * @interface getCitiesBody
 */
export interface getCitiesBody {
    /**
     * 是否为热门城市(\"default\"-全部城市; \"true\"-热门城市; \"false\"-其他城市)
     * @type {string}
     * @memberof getCitiesBody
     */
    isHot?: getCitiesBody.IsHotEnum;
}

/**
 * @export
 * @namespace getCitiesBody
 */
export namespace getCitiesBody {
    /**
     * @export
     * @enum {string}
     */
    export enum IsHotEnum {
        Default = <any> 'default',
        True = <any> 'true',
        False = <any> 'false'
    }
}

/**
 * 
 * @export
 * @interface getRegionsBody
 */
export interface getRegionsBody {
    /**
     * 城市ID
     * @type {string}
     * @memberof getRegionsBody
     */
    cityId: string;
}

/**
 * 
 * @export
 * @interface getRecommandSearchTipsBody
 */
export interface getRecommandSearchTipsBody {
    /**
     * 城市ID
     * @type {string}
     * @memberof getRecommandSearchTipsBody
     */
    cityId?: string;
    /**
     * 搜索关键字
     * @type {string}
     * @memberof getRecommandSearchTipsBody
     */
    searchTip?: string;
    /**
     * 经度
     * @type {number}
     * @memberof getRecommandSearchTipsBody
     */
    longitude?: number;
    /**
     * 纬度
     * @type {number}
     * @memberof getRecommandSearchTipsBody
     */
    latitude?: number;
    /**
     * 分页游标（初始值：0）
     * @type {number}
     * @memberof getRecommandSearchTipsBody
     */
    pageIndex?: number;
    /**
     * 每页数目
     * @type {number}
     * @memberof getRecommandSearchTipsBody
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface getHotSearchTipsBody
 */
export interface getHotSearchTipsBody {
    /**
     * 城市ID
     * @type {string}
     * @memberof getHotSearchTipsBody
     */
    cityId?: string;
    /**
     * 搜索关键字
     * @type {string}
     * @memberof getHotSearchTipsBody
     */
    searchTip?: string;
    /**
     * 分页游标（初始值：0）
     * @type {number}
     * @memberof getHotSearchTipsBody
     */
    pageIndex?: number;
    /**
     * 每页数目
     * @type {number}
     * @memberof getHotSearchTipsBody
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface getProductsBody
 */
export interface getProductsBody {
    /**
     * 商家ID
     * @type {string}
     * @memberof getProductsBody
     */
    merchantId?: string;
    /**
     * 分页游标（初始值：0）
     * @type {number}
     * @memberof getProductsBody
     */
    pageIndex?: number;
    /**
     * 每页数目
     * @type {number}
     * @memberof getProductsBody
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface getProductBriefBody
 */
export interface getProductBriefBody {
    /**
     * 商品ID
     * @type {string}
     * @memberof getProductBriefBody
     */
    productId: string;
}

/**
 * 
 * @export
 * @interface getProductDetailBody
 */
export interface getProductDetailBody {
    /**
     * 商品ID
     * @type {string}
     * @memberof getProductDetailBody
     */
    productId: string;
}

/**
 * 
 * @export
 * @interface getAddressBody
 */
export interface getAddressBody {
    /**
     * 地址id
     * @type {string}
     * @memberof getAddressBody
     */
    id?: string;
}

/**
 * 
 * @export
 * @interface getProductContentsBody
 */
export interface getProductContentsBody {
    /**
     * 商品ID
     * @type {string}
     * @memberof getProductContentsBody
     */
    productId: string;
}

/**
 * 
 * @export
 * @interface getAddressupdateUserInfoBody
 */
export interface getAddressupdateUserInfoBody {
    /**
     * 验证码
     * @type {string}
     * @memberof getAddressupdateUserInfoBody
     */
    code: string;
    /**
     * 新手机号
     * @type {string}
     * @memberof getAddressupdateUserInfoBody
     */
    mobile: string;
    /**
     * 新密码传明文
     * @type {string}
     * @memberof getAddressupdateUserInfoBody
     */
    password?: string;
}

/**
 * 
 * @export
 * @interface bindMobileBody
 */
export interface bindMobileBody {
    /**
     * 类型(1:微信)
     * @type {number}
     * @memberof bindMobileBody
     */
    type?: number;
    /**
     * 第三方平台openid
     * @type {string}
     * @memberof bindMobileBody
     */
    openId?: string;
    /**
     * 手机号码
     * @type {string}
     * @memberof bindMobileBody
     */
    mobile?: string;
    /**
     * 短信验证码
     * @type {string}
     * @memberof bindMobileBody
     */
    verifyCode?: string;
}

/**
 * 
 * @export
 * @interface bindWechatBody
 */
export interface bindWechatBody {
    /**
     * 微信openid
     * @type {string}
     * @memberof bindWechatBody
     */
    openId?: string;
    /**
     * 微信unionid
     * @type {string}
     * @memberof bindWechatBody
     */
    unionId?: string;
}

/**
 * 
 * @export
 * @interface getOrdersBody
 */
export interface getOrdersBody {
    /**
     * 状态状态 空为全部订单 (0.待支付1.待使用2.待评价3.退款中4.退款成功5.已取消)
     * @type {number}
     * @memberof getOrdersBody
     */
    status?: number;
    /**
     * 分页游标（初始值：0）
     * @type {number}
     * @memberof getOrdersBody
     */
    pageIndex?: number;
    /**
     * 每页数目
     * @type {number}
     * @memberof getOrdersBody
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface getOrderDetailBody
 */
export interface getOrderDetailBody {
    /**
     * 订单Id
     * @type {string}
     * @memberof getOrderDetailBody
     */
    orderId?: string;
}

/**
 * 
 * @export
 * @interface getRefundDetailBody
 */
export interface getRefundDetailBody {
    /**
     * 退款Id
     * @type {string}
     * @memberof getRefundDetailBody
     */
    refundId?: string;
}

/**
 * 
 * @export
 * @interface refundBody
 */
export interface refundBody {
    /**
     * 订单Id
     * @type {string}
     * @memberof refundBody
     */
    orderId?: string;
    /**
     * 退款原因
     * @type {string}
     * @memberof refundBody
     */
    reason?: string;
    /**
     * 消费券id数组
     * @type {Array<string>}
     * @memberof refundBody
     */
    ids?: Array<string>;
}

/**
 * 
 * @export
 * @interface getRefundListBody
 */
export interface getRefundListBody {
    /**
     * 订单Id
     * @type {string}
     * @memberof getRefundListBody
     */
    orderId?: string;
}

/**
 * 
 * @export
 * @interface deleteOrderBody
 */
export interface deleteOrderBody {
    /**
     * 订单Id
     * @type {string}
     * @memberof deleteOrderBody
     */
    orderId?: string;
}

/**
 * 
 * @export
 * @interface deleteAddressBody
 */
export interface deleteAddressBody {
    /**
     * 地址id
     * @type {string}
     * @memberof deleteAddressBody
     */
    id: string;
}

/**
 * 
 * @export
 * @interface cancelOrderBody
 */
export interface cancelOrderBody {
    /**
     * 订单Id
     * @type {string}
     * @memberof cancelOrderBody
     */
    orderId?: string;
}

/**
 * 
 * @export
 * @interface prePayBody
 */
export interface prePayBody {
    /**
     * 订单Id
     * @type {string}
     * @memberof prePayBody
     */
    orderId?: string;
    /**
     * 支付方式Id
     * @type {string}
     * @memberof prePayBody
     */
    payWayId?: string;
}

/**
 * 
 * @export
 * @interface getOrderPayStatusBody
 */
export interface getOrderPayStatusBody {
    /**
     * 订单Id
     * @type {string}
     * @memberof getOrderPayStatusBody
     */
    orderId?: string;
}

/**
 * 
 * @export
 * @interface getPlusOrderPayStatusBody
 */
export interface getPlusOrderPayStatusBody {
    /**
     * 购买记录id
     * @type {string}
     * @memberof getPlusOrderPayStatusBody
     */
    orderId?: string;
}

/**
 * 
 * @export
 * @interface getFreePlusBody
 */
export interface getFreePlusBody {
    /**
     * 城市ID
     * @type {number}
     * @memberof getFreePlusBody
     */
    cityId?: number;
    /**
     * 省Id
     * @type {number}
     * @memberof getFreePlusBody
     */
    provinceId?: number;
}

/**
 * 
 * @export
 * @interface getCashCouponListBody
 */
export interface getCashCouponListBody {
    /**
     * 分页索引
     * @type {number}
     * @memberof getCashCouponListBody
     */
    pageIndex?: number;
    /**
     * 分页大小
     * @type {number}
     * @memberof getCashCouponListBody
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface getCashCouponExpiredListBody
 */
export interface getCashCouponExpiredListBody {
    /**
     * 分页索引
     * @type {number}
     * @memberof getCashCouponExpiredListBody
     */
    pageIndex?: number;
    /**
     * 分页大小
     * @type {number}
     * @memberof getCashCouponExpiredListBody
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface getCouponByMerchentBody
 */
export interface getCouponByMerchentBody {
    /**
     * 商家id
     * @type {string}
     * @memberof getCouponByMerchentBody
     */
    merchantId: string;
}

/**
 * 
 * @export
 * @interface getCommentListBody
 */
export interface getCommentListBody {
    /**
     * 店铺id
     * @type {string}
     * @memberof getCommentListBody
     */
    merchantId?: string;
    /**
     * 分页索引
     * @type {number}
     * @memberof getCommentListBody
     */
    pageIndex?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof getCommentListBody
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface getCommentDetailBody
 */
export interface getCommentDetailBody {
    /**
     * 评论id
     * @type {number}
     * @memberof getCommentDetailBody
     */
    commentId?: number;
}

/**
 * 
 * @export
 * @interface verifyOldPhoneCodeBody
 */
export interface verifyOldPhoneCodeBody {
    /**
     * 验证码
     * @type {string}
     * @memberof verifyOldPhoneCodeBody
     */
    code: string;
}

/**
 * 
 * @export
 * @interface getCanUseCouponListBody
 */
export interface getCanUseCouponListBody {
    /**
     * 商家id
     * @type {number}
     * @memberof getCanUseCouponListBody
     */
    merchantId?: number;
    /**
     * 平台类型 2.app 3.小程序
     * @type {number}
     * @memberof getCanUseCouponListBody
     */
    platform?: number;
}

/**
 * 
 * @export
 * @interface getDailyCanUseCouponListBody
 */
export interface getDailyCanUseCouponListBody {
    /**
     * 商家id
     * @type {number}
     * @memberof getDailyCanUseCouponListBody
     */
    merchantId?: number;
    /**
     * 平台类型 2.app 3.小程序
     * @type {number}
     * @memberof getDailyCanUseCouponListBody
     */
    platform?: number;
}

/**
 * 
 * @export
 * @interface exchangeCouponBody
 */
export interface exchangeCouponBody {
    /**
     * 优惠券Code
     * @type {string}
     * @memberof exchangeCouponBody
     */
    couponCode?: string;
}

/**
 * 
 * @export
 * @interface getDiscountCouponListBody
 */
export interface getDiscountCouponListBody {
    /**
     * 分页索引
     * @type {number}
     * @memberof getDiscountCouponListBody
     */
    pageIndex?: number;
    /**
     * 分页大小
     * @type {number}
     * @memberof getDiscountCouponListBody
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface getDiscountCouponExpireListBody
 */
export interface getDiscountCouponExpireListBody {
    /**
     * 分页索引
     * @type {number}
     * @memberof getDiscountCouponExpireListBody
     */
    pageIndex?: number;
    /**
     * 分页大小
     * @type {number}
     * @memberof getDiscountCouponExpireListBody
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface getCouponApplyMerchantsBriefBody
 */
export interface getCouponApplyMerchantsBriefBody {
    /**
     * 优惠券适用商家列表概要信息
     * @type {Array<string>}
     * @memberof getCouponApplyMerchantsBriefBody
     */
    merchantIds?: Array<string>;
}

/**
 * 
 * @export
 * @interface getDuibaAccessUrlBody
 */
export interface getDuibaAccessUrlBody {
    /**
     * 重定向url
     * @type {string}
     * @memberof getDuibaAccessUrlBody
     */
    redirect?: string;
}

/**
 * 
 * @export
 * @interface getAppNewestVersionBody
 */
export interface getAppNewestVersionBody {
    /**
     * 更新平台（1：Android；2：IOS）
     * @type {number}
     * @memberof getAppNewestVersionBody
     */
    platform?: number;
}

/**
 * 
 * @export
 * @interface bindNewPhoneBody
 */
export interface bindNewPhoneBody {
    /**
     * 验证码
     * @type {string}
     * @memberof bindNewPhoneBody
     */
    code: string;
    /**
     * 新手机号
     * @type {string}
     * @memberof bindNewPhoneBody
     */
    mobile: string;
}

/**
 * 
 * @export
 * @interface uploadHeadImageBody
 */
export interface uploadHeadImageBody {
    /**
     * 头像文件
     * @type {string}
     * @memberof uploadHeadImageBody
     */
    fileContent: string;
    /**
     * 文件名
     * @type {string}
     * @memberof uploadHeadImageBody
     */
    fileName: string;
}

/**
 * 
 * @export
 * @interface getCityBannersBody
 */
export interface getCityBannersBody {
    /**
     * 城市id
     * @type {string}
     * @memberof getCityBannersBody
     */
    cityId: string;
}

/**
 * 
 * @export
 * @interface getCityRecommandCategoriesBody
 */
export interface getCityRecommandCategoriesBody {
    /**
     * 城市id
     * @type {string}
     * @memberof getCityRecommandCategoriesBody
     */
    cityId: string;
    /**
     * 分页游标（初始值：0）
     * @type {number}
     * @memberof getCityRecommandCategoriesBody
     */
    pageIndex?: number;
    /**
     * 每页数目
     * @type {number}
     * @memberof getCityRecommandCategoriesBody
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface BuyPlus
 */
export interface BuyPlus {
    /**
     * plus类型
     * @type {number}
     * @memberof BuyPlus
     */
    plusType?: number;
    /**
     * 支付方式Id
     * @type {number}
     * @memberof BuyPlus
     */
    payWayId?: number;
    /**
     * 城市ID
     * @type {number}
     * @memberof BuyPlus
     */
    cityId?: number;
    /**
     * 省Id
     * @type {number}
     * @memberof BuyPlus
     */
    provinceId?: number;
}

/**
 * 
 * @export
 * @interface BuyPlusInfo
 */
export interface BuyPlusInfo {
    /**
     * 
     * @type {PrePayInfoWechatPay}
     * @memberof BuyPlusInfo
     */
    wechatPay?: PrePayInfoWechatPay;
    /**
     * 阿里支付
     * @type {string}
     * @memberof BuyPlusInfo
     */
    aliPay?: string;
    /**
     * plus购买记录id
     * @type {string}
     * @memberof BuyPlusInfo
     */
    orderId?: string;
}

/**
 * 代金券详情
 * @export
 * @interface CashCoupon
 */
export interface CashCoupon {
    /**
     * 订单Id
     * @type {string}
     * @memberof CashCoupon
     */
    orderId?: string;
    /**
     * 适用店铺ID
     * @type {number}
     * @memberof CashCoupon
     */
    merchantId?: number;
    /**
     * 适用店铺名称
     * @type {string}
     * @memberof CashCoupon
     */
    merchantName?: string;
    /**
     * 代金券名称
     * @type {string}
     * @memberof CashCoupon
     */
    productName?: string;
    /**
     * 代金券Id
     * @type {number}
     * @memberof CashCoupon
     */
    productId?: number;
    /**
     * 失效原因（1：已使用；2：退款；3：已过期）
     * @type {number}
     * @memberof CashCoupon
     */
    status?: number;
    /**
     * 使用开始时间
     * @type {Date}
     * @memberof CashCoupon
     */
    effectStartTime?: Date;
    /**
     * 使用结束时间
     * @type {Date}
     * @memberof CashCoupon
     */
    effectEndTime?: Date;
    /**
     * 代金券单价（代金券购买价）
     * @type {number}
     * @memberof CashCoupon
     */
    money?: number;
    /**
     * 商品价（代金券购买价）
     * @type {number}
     * @memberof CashCoupon
     */
    favorablePrice?: number;
    /**
     * 市场价（代金券抵扣价格）
     * @type {number}
     * @memberof CashCoupon
     */
    marketPrice?: number;
    /**
     * 代金券总价（代金券总购买价）
     * @type {number}
     * @memberof CashCoupon
     */
    totalMoney?: number;
    /**
     * 代金券总数
     * @type {number}
     * @memberof CashCoupon
     */
    totalCount?: number;
}

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 分类ID
     * @type {string}
     * @memberof Category
     */
    id?: string;
    /**
     * 分类名称
     * @type {string}
     * @memberof Category
     */
    name?: string;
    /**
     * 图标路径
     * @type {string}
     * @memberof Category
     */
    iconPath?: string;
    /**
     * 
     * @type {Category}
     * @memberof Category
     */
    children?: Category;
}

/**
 * 
 * @export
 * @interface City
 */
export interface City {
    /**
     * 城市ID
     * @type {string}
     * @memberof City
     */
    id?: string;
    /**
     * 城市名称
     * @type {string}
     * @memberof City
     */
    name?: string;
    /**
     * 城市拼音
     * @type {string}
     * @memberof City
     */
    phoneticize?: string;
    /**
     * 省份ID
     * @type {string}
     * @memberof City
     */
    provinceId?: string;
    /**
     * 
     * @type {Array<Area>}
     * @memberof City
     */
    areas?: Array<Area>;
}

/**
 * 城市相关信息
 * @export
 * @interface CityInformation
 */
export interface CityInformation {
    /**
     * 城市Id
     * @type {string}
     * @memberof CityInformation
     */
    id?: string;
    /**
     * 城市名称
     * @type {string}
     * @memberof CityInformation
     */
    name?: string;
    /**
     * 城市标语
     * @type {string}
     * @memberof CityInformation
     */
    phoneticize?: string;
    /**
     * 所属省份Id
     * @type {string}
     * @memberof CityInformation
     */
    provinceId?: string;
}

/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 店铺ID
     * @type {string}
     * @memberof Comment
     */
    merchantId?: string;
    /**
     * 订单ID
     * @type {string}
     * @memberof Comment
     */
    orderId?: string;
    /**
     * 用餐体验（1：差；3：一般；5：满意  {默认——>5：满意}）
     * @type {number}
     * @memberof Comment
     */
    score?: number;
    /**
     * 推荐菜集合（最多8个）
     * @type {Array<CommentRecommendDishes>}
     * @memberof Comment
     */
    recommendDishes?: Array<CommentRecommendDishes>;
    /**
     * 评论内容（字符数限制：下限10，上线200）
     * @type {string}
     * @memberof Comment
     */
    content?: string;
    /**
     * 图片文件ID集合
     * @type {Array<string>}
     * @memberof Comment
     */
    pictureIds?: Array<string>;
}

/**
 * 
 * @export
 * @interface CommentInfo
 */
export interface CommentInfo {
    /**
     * 评论ID
     * @type {number}
     * @memberof CommentInfo
     */
    commentId?: number;
    /**
     * 评论内容
     * @type {string}
     * @memberof CommentInfo
     */
    content?: string;
    /**
     * 评论时间
     * @type {Date}
     * @memberof CommentInfo
     */
    createTime?: Date;
    /**
     * 评分
     * @type {number}
     * @memberof CommentInfo
     */
    score?: number;
    /**
     * 用户账户
     * @type {string}
     * @memberof CommentInfo
     */
    userAccount?: string;
    /**
     * 用户头像
     * @type {string}
     * @memberof CommentInfo
     */
    userHeadPicture?: string;
    /**
     * 当前用户是否点赞
     * @type {boolean}
     * @memberof CommentInfo
     */
    isLike?: boolean;
    /**
     * 评论总数
     * @type {number}
     * @memberof CommentInfo
     */
    likeCount?: number;
    /**
     * 菜品名称
     * @type {string}
     * @memberof CommentInfo
     */
    dishName?: string;
    /**
     * 评论图片
     * @type {Array<string>}
     * @memberof CommentInfo
     */
    pictureList?: Array<string>;
    /**
     * 评论推荐菜
     * @type {Array<string>}
     * @memberof CommentInfo
     */
    recommendDishList?: Array<string>;
}

/**
 * 推荐菜信息
 * @export
 * @interface CommentRecommendDishes
 */
export interface CommentRecommendDishes {
    /**
     * 推荐菜ID
     * @type {string}
     * @memberof CommentRecommendDishes
     */
    recommendDishId?: string;
    /**
     * 推荐菜名
     * @type {string}
     * @memberof CommentRecommendDishes
     */
    recommendDishName?: string;
}

/**
 * 
 * @export
 * @interface CommonLoginInfo
 */
export interface CommonLoginInfo {
    /**
     * 用户登录类型: 1:账号密码登录; 2:手机快捷登录；3:微信登录
     * @type {number}
     * @memberof CommonLoginInfo
     */
    type: CommonLoginInfo.TypeEnum;
    /**
     * 邀请码
     * @type {string}
     * @memberof CommonLoginInfo
     */
    inviteCode?: string;
    /**
     * 所在省名称
     * @type {string}
     * @memberof CommonLoginInfo
     */
    province?: string;
    /**
     * 所在市名称
     * @type {string}
     * @memberof CommonLoginInfo
     */
    city?: string;
}

/**
 * @export
 * @namespace CommonLoginInfo
 */
export namespace CommonLoginInfo {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_3 = <any> 3
    }
}

/**
 * 
 * @export
 * @interface Coupon
 */
export interface Coupon {
    /**
     * 优惠券id
     * @type {string}
     * @memberof Coupon
     */
    id?: string;
    /**
     * 是否可用  1可用0不可用
     * @type {string}
     * @memberof Coupon
     */
    status?: Coupon.StatusEnum;
    /**
     * 不可用原因
     * @type {string}
     * @memberof Coupon
     */
    reason?: string;
    /**
     * 优惠券名称
     * @type {string}
     * @memberof Coupon
     */
    name?: string;
    /**
     * 优惠券类型(1消费优惠券2活动优惠券)
     * @type {string}
     * @memberof Coupon
     */
    type?: Coupon.TypeEnum;
    /**
     * 使用门槛
     * @type {number}
     * @memberof Coupon
     */
    useMinimumComsumption?: number;
    /**
     * 面值
     * @type {number}
     * @memberof Coupon
     */
    money?: number;
    /**
     * 使用有效期(开始时间)
     * @type {string}
     * @memberof Coupon
     */
    useStartTime?: string;
    /**
     * 使用有效期(结束时间)
     * @type {string}
     * @memberof Coupon
     */
    useEndTime?: string;
}

/**
 * @export
 * @namespace Coupon
 */
export namespace Coupon {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        _0 = <any> '0',
        _1 = <any> '1'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        _1 = <any> '1',
        _2 = <any> '2'
    }
}

/**
 * 优惠券适用商家列表
 * @export
 * @interface CouponApplyMerchantBrief
 */
export interface CouponApplyMerchantBrief {
    /**
     * 商家Id
     * @type {string}
     * @memberof CouponApplyMerchantBrief
     */
    id?: string;
    /**
     * 商家分类名称
     * @type {string}
     * @memberof CouponApplyMerchantBrief
     */
    categoryName?: string;
    /**
     * 商家商圈名称
     * @type {string}
     * @memberof CouponApplyMerchantBrief
     */
    regionName?: string;
    /**
     * 距离
     * @type {number}
     * @memberof CouponApplyMerchantBrief
     */
    distance?: number;
    /**
     * 商家名称
     * @type {string}
     * @memberof CouponApplyMerchantBrief
     */
    name?: string;
    /**
     * 人均消费
     * @type {number}
     * @memberof CouponApplyMerchantBrief
     */
    averageConsume?: number;
    /**
     * 商家logo图片路径
     * @type {string}
     * @memberof CouponApplyMerchantBrief
     */
    logoPath?: string;
    /**
     * 商家封面图片路径
     * @type {string}
     * @memberof CouponApplyMerchantBrief
     */
    coverPath?: string;
}

/**
 * 优惠券详情
 * @export
 * @interface DiscountCoupon
 */
export interface DiscountCoupon {
    /**
     * 优惠券ID
     * @type {number}
     * @memberof DiscountCoupon
     */
    couponId?: number;
    /**
     * 优惠券适用店铺ID集合
     * @type {Array<number>}
     * @memberof DiscountCoupon
     */
    provideMerchantIds?: Array<number>;
    /**
     * 优惠券适用店铺名称（适用店铺为单个时，此处有值）
     * @type {string}
     * @memberof DiscountCoupon
     */
    merchantName?: string;
    /**
     * 优惠券名称
     * @type {string}
     * @memberof DiscountCoupon
     */
    name?: string;
    /**
     * 面额
     * @type {number}
     * @memberof DiscountCoupon
     */
    faceValue?: number;
    /**
     * 优惠券类型（1：满减优惠券；2：兑换码优惠券）
     * @type {number}
     * @memberof DiscountCoupon
     */
    type?: number;
    /**
     * 使用门槛（满xx减xx）
     * @type {number}
     * @memberof DiscountCoupon
     */
    useThreshold?: number;
    /**
     * 适用平台（1：全平台；2：App；3：小程序）
     * @type {number}
     * @memberof DiscountCoupon
     */
    platform?: number;
    /**
     * 适用城市ID
     * @type {number}
     * @memberof DiscountCoupon
     */
    cityId?: number;
    /**
     * 失效原因（1：已使用；2：已过期）
     * @type {number}
     * @memberof DiscountCoupon
     */
    status?: number;
    /**
     * 有效开始时间
     * @type {Date}
     * @memberof DiscountCoupon
     */
    startTime?: Date;
    /**
     * 有效结束时间
     * @type {Date}
     * @memberof DiscountCoupon
     */
    endTime?: Date;
}

/**
 * 
 * @export
 * @interface EmptyResult
 */
export interface EmptyResult {
    /**
     * 
     * @type {boolean}
     * @memberof EmptyResult
     */
    data?: boolean;
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {InlineResponse200Data}
     * @memberof InlineResponse200
     */
    data?: InlineResponse200Data;
}

/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 积分
     * @type {number}
     * @memberof InlineResponse2001
     */
    point?: number;
}

/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {any}
     * @memberof InlineResponse20010
     */
    data?: any;
}

/**
 * 
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * 
     * @type {any}
     * @memberof InlineResponse20011
     */
    data?: any;
}

/**
 * 
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
    /**
     * 
     * @type {Array<City>}
     * @memberof InlineResponse20012
     */
    data?: Array<City>;
}

/**
 * 
 * @export
 * @interface InlineResponse20013
 */
export interface InlineResponse20013 {
    /**
     * 
     * @type {Array<Area>}
     * @memberof InlineResponse20013
     */
    data?: Array<Area>;
}

/**
 * 
 * @export
 * @interface InlineResponse20014
 */
export interface InlineResponse20014 {
    /**
     * 
     * @type {InlineResponse20014Data}
     * @memberof InlineResponse20014
     */
    data?: InlineResponse20014Data;
}

/**
 * 
 * @export
 * @interface InlineResponse20014Data
 */
export interface InlineResponse20014Data {
    /**
     * 推荐关键字列表
     * @type {Array<Keyword>}
     * @memberof InlineResponse20014Data
     */
    keywords?: Array<Keyword>;
    /**
     * 
     * @type {Page}
     * @memberof InlineResponse20014Data
     */
    page?: Page;
}

/**
 * 
 * @export
 * @interface InlineResponse20015
 */
export interface InlineResponse20015 {
    /**
     * 
     * @type {InlineResponse20015Data}
     * @memberof InlineResponse20015
     */
    data?: InlineResponse20015Data;
}

/**
 * 
 * @export
 * @interface InlineResponse20015Data
 */
export interface InlineResponse20015Data {
    /**
     * 热门搜索关键字列表
     * @type {Array<Keyword>}
     * @memberof InlineResponse20015Data
     */
    keywords?: Array<Keyword>;
    /**
     * 
     * @type {Page}
     * @memberof InlineResponse20015Data
     */
    page?: Page;
}

/**
 * 
 * @export
 * @interface InlineResponse20016
 */
export interface InlineResponse20016 {
    /**
     * 
     * @type {any}
     * @memberof InlineResponse20016
     */
    data?: any;
}

/**
 * 
 * @export
 * @interface InlineResponse20017
 */
export interface InlineResponse20017 {
    /**
     * 会员列表
     * @type {Array<PlusMemberType>}
     * @memberof InlineResponse20017
     */
    data?: Array<PlusMemberType>;
}

/**
 * 
 * @export
 * @interface InlineResponse20018
 */
export interface InlineResponse20018 {
    /**
     * 结果信息
     * @type {Array<Province>}
     * @memberof InlineResponse20018
     */
    data?: Array<Province>;
}

/**
 * 
 * @export
 * @interface InlineResponse20019
 */
export interface InlineResponse20019 {
    /**
     * 
     * @type {OrderSimpleInfo}
     * @memberof InlineResponse20019
     */
    data?: OrderSimpleInfo;
}

/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 积分列表
     * @type {Array<PointsDetail>}
     * @memberof InlineResponse2002
     */
    data?: Array<PointsDetail>;
}

/**
 * 
 * @export
 * @interface InlineResponse20020
 */
export interface InlineResponse20020 {
    /**
     * 
     * @type {OrderInfo}
     * @memberof InlineResponse20020
     */
    data?: OrderInfo;
}

/**
 * 
 * @export
 * @interface InlineResponse20021
 */
export interface InlineResponse20021 {
    /**
     * 
     * @type {RefundInfo}
     * @memberof InlineResponse20021
     */
    data?: RefundInfo;
}

/**
 * 
 * @export
 * @interface InlineResponse20022
 */
export interface InlineResponse20022 {
    /**
     * 
     * @type {RefundList}
     * @memberof InlineResponse20022
     */
    data?: RefundList;
}

/**
 * 
 * @export
 * @interface InlineResponse20023
 */
export interface InlineResponse20023 {
    /**
     * 
     * @type {PrePayInfo}
     * @memberof InlineResponse20023
     */
    data?: PrePayInfo;
}

/**
 * 
 * @export
 * @interface InlineResponse20024
 */
export interface InlineResponse20024 {
    /**
     * 
     * @type {InlineResponse20024Data}
     * @memberof InlineResponse20024
     */
    data?: InlineResponse20024Data;
}

/**
 * 
 * @export
 * @interface InlineResponse20024Data
 */
export interface InlineResponse20024Data {
    /**
     * 支付状态 (0:待支付1:支付成功2:支付中3:取消支付4:支付失败)
     * @type {number}
     * @memberof InlineResponse20024Data
     */
    payStatus?: number;
    /**
     * 积分
     * @type {number}
     * @memberof InlineResponse20024Data
     */
    point?: number;
    /**
     * 实际支付价格
     * @type {number}
     * @memberof InlineResponse20024Data
     */
    actualMoney?: number;
    /**
     * 是否可以增加积分
     * @type {boolean}
     * @memberof InlineResponse20024Data
     */
    canIncreasePoint?: boolean;
    /**
     * 
     * @type {DiscountCoupon}
     * @memberof InlineResponse20024Data
     */
    couponInfo?: DiscountCoupon;
}

/**
 * 
 * @export
 * @interface InlineResponse20025
 */
export interface InlineResponse20025 {
    /**
     * 
     * @type {BuyPlusInfo}
     * @memberof InlineResponse20025
     */
    data?: BuyPlusInfo;
}

/**
 * 
 * @export
 * @interface InlineResponse20026
 */
export interface InlineResponse20026 {
    /**
     * 
     * @type {InlineResponse20026Data}
     * @memberof InlineResponse20026
     */
    data?: InlineResponse20026Data;
}

/**
 * 
 * @export
 * @interface InlineResponse20026Data
 */
export interface InlineResponse20026Data {
    /**
     * 支付状态 (0:待支付1:支付成功2:支付中3:取消支付4:支付失败)
     * @type {number}
     * @memberof InlineResponse20026Data
     */
    payStatus?: number;
}

/**
 * 
 * @export
 * @interface InlineResponse20027
 */
export interface InlineResponse20027 {
    /**
     * 支付方式
     * @type {Array<PayWay>}
     * @memberof InlineResponse20027
     */
    data?: Array<PayWay>;
}

/**
 * 代金券返回值
 * @export
 * @interface InlineResponse20028
 */
export interface InlineResponse20028 {
    /**
     * 
     * @type {Array<CashCoupon>}
     * @memberof InlineResponse20028
     */
    cashCouponList?: Array<CashCoupon>;
    /**
     * 代金券总数
     * @type {number}
     * @memberof InlineResponse20028
     */
    totalCount?: number;
}

/**
 * 代金券返回值
 * @export
 * @interface InlineResponse20029
 */
export interface InlineResponse20029 {
    /**
     * 
     * @type {Array<CashCoupon>}
     * @memberof InlineResponse20029
     */
    cashCouponList?: Array<CashCoupon>;
    /**
     * 过期代金券总数
     * @type {number}
     * @memberof InlineResponse20029
     */
    totalCount?: number;
}

/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 增加的积分数量
     * @type {number}
     * @memberof InlineResponse2003
     */
    point?: number;
}

/**
 * 
 * @export
 * @interface InlineResponse20030
 */
export interface InlineResponse20030 {
    /**
     * 优惠券
     * @type {Array<Coupon>}
     * @memberof InlineResponse20030
     */
    data?: Array<Coupon>;
}

/**
 * 
 * @export
 * @interface InlineResponse20031
 */
export interface InlineResponse20031 {
    /**
     * 
     * @type {InlineResponse20031Data}
     * @memberof InlineResponse20031
     */
    data?: InlineResponse20031Data;
}

/**
 * 
 * @export
 * @interface InlineResponse20031Data
 */
export interface InlineResponse20031Data {
    /**
     * 
     * @type {Array<CommentInfo>}
     * @memberof InlineResponse20031Data
     */
    comments?: Array<CommentInfo>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20031Data
     */
    totalComment?: number;
}

/**
 * 
 * @export
 * @interface InlineResponse20032
 */
export interface InlineResponse20032 {
    /**
     * 
     * @type {CommentInfo}
     * @memberof InlineResponse20032
     */
    data?: CommentInfo;
}

/**
 * 
 * @export
 * @interface InlineResponse20033
 */
export interface InlineResponse20033 {
    /**
     * 用户可用优惠券列表
     * @type {Array<DiscountCoupon>}
     * @memberof InlineResponse20033
     */
    data?: Array<DiscountCoupon>;
}

/**
 * 
 * @export
 * @interface InlineResponse20034
 */
export interface InlineResponse20034 {
    /**
     * 
     * @type {InlineResponse20034Data}
     * @memberof InlineResponse20034
     */
    data?: InlineResponse20034Data;
}

/**
 * 
 * @export
 * @interface InlineResponse20034Data
 */
export interface InlineResponse20034Data {
    /**
     * 用户可用优惠券列表
     * @type {Array<DiscountCoupon>}
     * @memberof InlineResponse20034Data
     */
    userCouponInfoList?: Array<DiscountCoupon>;
    /**
     * 是否可以使用优惠券（每天限制使用3张优惠券）
     * @type {boolean}
     * @memberof InlineResponse20034Data
     */
    canUseCoupon?: boolean;
}

/**
 * 
 * @export
 * @interface InlineResponse20035
 */
export interface InlineResponse20035 {
    /**
     * 
     * @type {DiscountCoupon}
     * @memberof InlineResponse20035
     */
    data?: DiscountCoupon;
}

/**
 * 优惠券返回值
 * @export
 * @interface InlineResponse20036
 */
export interface InlineResponse20036 {
    /**
     * 优惠券列表
     * @type {Array<DiscountCoupon>}
     * @memberof InlineResponse20036
     */
    discountCouponList?: Array<DiscountCoupon>;
    /**
     * 优惠券总数
     * @type {number}
     * @memberof InlineResponse20036
     */
    totalCount?: number;
}

/**
 * 过期优惠券返回值
 * @export
 * @interface InlineResponse20037
 */
export interface InlineResponse20037 {
    /**
     * 过期优惠券列表
     * @type {Array<DiscountCoupon>}
     * @memberof InlineResponse20037
     */
    discountCouponExpiredList?: Array<DiscountCoupon>;
    /**
     * 过期优惠券总数
     * @type {number}
     * @memberof InlineResponse20037
     */
    totalCount?: number;
}

/**
 * 
 * @export
 * @interface InlineResponse20038
 */
export interface InlineResponse20038 {
    /**
     * 优惠券适用商家列表
     * @type {Array<CouponApplyMerchantBrief>}
     * @memberof InlineResponse20038
     */
    applyMerchantList?: Array<CouponApplyMerchantBrief>;
}

/**
 * 
 * @export
 * @interface InlineResponse20039
 */
export interface InlineResponse20039 {
    /**
     * 
     * @type {InlineResponse20039Data}
     * @memberof InlineResponse20039
     */
    data?: InlineResponse20039Data;
}

/**
 * 
 * @export
 * @interface InlineResponse20039Data
 */
export interface InlineResponse20039Data {
    /**
     * 访问积分商城的url
     * @type {string}
     * @memberof InlineResponse20039Data
     */
    accessUrl?: string;
}

/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 城市Id
     * @type {number}
     * @memberof InlineResponse2004
     */
    id?: number;
    /**
     * 城市名称
     * @type {string}
     * @memberof InlineResponse2004
     */
    name?: string;
    /**
     * 拼音
     * @type {string}
     * @memberof InlineResponse2004
     */
    phoneticize?: string;
    /**
     * 所属省份
     * @type {number}
     * @memberof InlineResponse2004
     */
    provinceId?: number;
    /**
     * 区域
     * @type {number}
     * @memberof InlineResponse2004
     */
    areas?: number;
}

/**
 * 
 * @export
 * @interface InlineResponse20040
 */
export interface InlineResponse20040 {
    /**
     * 
     * @type {ApplicationNewestVersion}
     * @memberof InlineResponse20040
     */
    data?: ApplicationNewestVersion;
}

/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {City}
     * @memberof InlineResponse2005
     */
    data?: City;
}

/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {any}
     * @memberof InlineResponse2006
     */
    data?: any;
}

/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 结果信息
     * @type {Array<MerchantDetail>}
     * @memberof InlineResponse2007
     */
    data?: Array<MerchantDetail>;
}

/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {InlineResponse2008Data}
     * @memberof InlineResponse2008
     */
    data?: InlineResponse2008Data;
}

/**
 * 
 * @export
 * @interface InlineResponse2008Data
 */
export interface InlineResponse2008Data {
    /**
     * 详情内容
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    detail?: string;
}

/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {any}
     * @memberof InlineResponse2009
     */
    data?: any;
}

/**
 * 
 * @export
 * @interface InlineResponse200Data
 */
export interface InlineResponse200Data {
    /**
     * 
     * @type {User}
     * @memberof InlineResponse200Data
     */
    user?: User;
    /**
     * 用户 token , 用来验证用于 auth 信息
     * @type {string}
     * @memberof InlineResponse200Data
     */
    userToken?: string;
}

/**
 * 
 * @export
 * @interface Keyword
 */
export interface Keyword {
    /**
     * 关键字类型(\"category\"-菜系; \"area\"-区域; \"region\"-\"商圈\"; \"dish\"-菜品;  \"merchant\"-商家)
     * @type {string}
     * @memberof Keyword
     */
    type?: Keyword.TypeEnum;
    /**
     * 关键字ID
     * @type {string}
     * @memberof Keyword
     */
    id?: string;
    /**
     * 关键字
     * @type {string}
     * @memberof Keyword
     */
    name?: string;
    /**
     * 
     * @type {KeywordExt}
     * @memberof Keyword
     */
    ext?: KeywordExt;
}

/**
 * @export
 * @namespace Keyword
 */
export namespace Keyword {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Category = <any> 'category',
        Area = <any> 'area',
        Region = <any> 'region',
        Dish = <any> 'dish',
        Merchant = <any> 'merchant'
    }
}

/**
 * 商家相关信息, 当type == \"merchant\"时有效
 * @export
 * @interface KeywordExt
 */
export interface KeywordExt {
    /**
     * 菜系
     * @type {string}
     * @memberof KeywordExt
     */
    categoryName?: string;
    /**
     * 地址
     * @type {string}
     * @memberof KeywordExt
     */
    address?: string;
    /**
     * 距离(km)
     * @type {number}
     * @memberof KeywordExt
     */
    distance?: number;
    /**
     * 菜名
     * @type {string}
     * @memberof KeywordExt
     */
    dishName?: string;
    /**
     * 是否能优惠买单(\"true\"-是; \"false\"-否;)
     * @type {string}
     * @memberof KeywordExt
     */
    isDiscount?: string;
    /**
     * 是否有优惠券(\"true\"-是; \"false\"-否;)
     * @type {string}
     * @memberof KeywordExt
     */
    hasCoupon?: string;
}

/**
 * 
 * @export
 * @interface Like
 */
export interface Like {
    /**
     * 用户ID（前端传送userToken即可）
     * @type {string}
     * @memberof Like
     */
    userid?: string;
    /**
     * 点赞来源/对象（1：评论）
     * @type {number}
     * @memberof Like
     */
    likeSource?: number;
    /**
     * 来源/对象ID
     * @type {string}
     * @memberof Like
     */
    sourceId?: string;
    /**
     * 是否点赞（0：未点赞；1：已点赞）
     * @type {number}
     * @memberof Like
     */
    isLike?: number;
}

/**
 * 
 * @export
 * @interface MerchantAttachment
 */
export interface MerchantAttachment {
    /**
     * 主键ID
     * @type {string}
     * @memberof MerchantAttachment
     */
    id?: string;
    /**
     * 名称
     * @type {string}
     * @memberof MerchantAttachment
     */
    name?: string;
    /**
     * 附件类型(\"picture\"-图片; \"panorama\"-全景图; \"vedio\"-视频;)
     * @type {string}
     * @memberof MerchantAttachment
     */
    type?: string;
    /**
     * 描述
     * @type {string}
     * @memberof MerchantAttachment
     */
    description?: string;
    /**
     * 附件资源路径
     * @type {string}
     * @memberof MerchantAttachment
     */
    attachUrl?: string;
}

/**
 * 
 * @export
 * @interface MerchantBrief
 */
export interface MerchantBrief {
    /**
     * 商家ID
     * @type {string}
     * @memberof MerchantBrief
     */
    id?: string;
    /**
     * 商家名称
     * @type {string}
     * @memberof MerchantBrief
     */
    name?: string;
    /**
     * 商家logo路径
     * @type {string}
     * @memberof MerchantBrief
     */
    logoPath?: string;
    /**
     * 人气好店封面图片路径
     * @type {string}
     * @memberof MerchantBrief
     */
    coverPath?: string;
    /**
     * 店铺列表多张图
     * @type {string}
     * @memberof MerchantBrief
     */
    coverPaths?: string;
    /**
     * 人均消费
     * @type {number}
     * @memberof MerchantBrief
     */
    averageConsume?: number;
    /**
     * 商圈名称
     * @type {string}
     * @memberof MerchantBrief
     */
    regionName?: string;
    /**
     * 分类名称
     * @type {string}
     * @memberof MerchantBrief
     */
    categoryName?: string;
    /**
     * 距离（单位：km）
     * @type {number}
     * @memberof MerchantBrief
     */
    distance?: number;
    /**
     * 星级评价
     * @type {number}
     * @memberof MerchantBrief
     */
    commentLevel?: number;
    /**
     * 推荐消费券信息
     * @type {string}
     * @memberof MerchantBrief
     */
    coupon?: string;
    /**
     * 推荐优惠买单信息
     * @type {number}
     * @memberof MerchantBrief
     */
    discountSetting?: number;
    /**
     * plus商家优惠买单折扣
     * @type {number}
     * @memberof MerchantBrief
     */
    plusDiscountSetting?: number;
    /**
     * 是否是Plus店铺（false：非Plus店铺；true：Plus店铺）
     * @type {boolean}
     * @memberof MerchantBrief
     */
    isPlus?: boolean;
    /**
     * 状态（0:下架 1:上架）
     * @type {number}
     * @memberof MerchantBrief
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface MerchantComment
 */
export interface MerchantComment {
    /**
     * 评论ID
     * @type {string}
     * @memberof MerchantComment
     */
    id?: string;
    /**
     * 评论者用户名
     * @type {string}
     * @memberof MerchantComment
     */
    userName?: string;
    /**
     * 评论者头像地址
     * @type {string}
     * @memberof MerchantComment
     */
    userHeadImagePath?: string;
    /**
     * 菜品质量
     * @type {string}
     * @memberof MerchantComment
     */
    dishScore?: string;
    /**
     * 就餐环境
     * @type {string}
     * @memberof MerchantComment
     */
    environmentScore?: string;
    /**
     * 服务质量
     * @type {string}
     * @memberof MerchantComment
     */
    serviceScore?: string;
    /**
     * 评论内容
     * @type {string}
     * @memberof MerchantComment
     */
    content?: string;
    /**
     * 评论时间
     * @type {string}
     * @memberof MerchantComment
     */
    time?: string;
    /**
     * 评论图片地址集合
     * @type {Array<string>}
     * @memberof MerchantComment
     */
    picPaths?: Array<string>;
}

/**
 * 
 * @export
 * @interface MerchantDetail
 */
export interface MerchantDetail extends MerchantBrief {
    /**
     * 地址详情
     * @type {string}
     * @memberof MerchantDetail
     */
    detailAddress?: string;
    /**
     * 是否支持优惠买单(0:否 1:是)
     * @type {number}
     * @memberof MerchantDetail
     */
    isApproveDiscount?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof MerchantDetail
     */
    contactTels?: Array<string>;
    /**
     * 营业时间
     * @type {string}
     * @memberof MerchantDetail
     */
    businessTime?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MerchantDetail
     */
    recommandReasons?: Array<string>;
}

/**
 * 
 * @export
 * @interface MerchantDiscountSetting
 */
export interface MerchantDiscountSetting {
    /**
     * 主键ID
     * @type {string}
     * @memberof MerchantDiscountSetting
     */
    id?: string;
    /**
     * 售出折扣
     * @type {number}
     * @memberof MerchantDiscountSetting
     */
    outDiscount?: number;
}

/**
 * 
 * @export
 * @interface MerchantDish
 */
export interface MerchantDish {
    /**
     * 菜品ID
     * @type {string}
     * @memberof MerchantDish
     */
    id?: string;
    /**
     * 菜品名称
     * @type {string}
     * @memberof MerchantDish
     */
    name?: string;
    /**
     * 菜品价格
     * @type {number}
     * @memberof MerchantDish
     */
    price?: number;
    /**
     * 推荐指数
     * @type {number}
     * @memberof MerchantDish
     */
    recommandIndex?: number;
    /**
     * 图片路径
     * @type {string}
     * @memberof MerchantDish
     */
    picPath?: string;
}

/**
 * 
 * @export
 * @interface MerchantService
 */
export interface MerchantService {
    /**
     * 服务ID
     * @type {string}
     * @memberof MerchantService
     */
    id?: string;
    /**
     * 服务名称
     * @type {string}
     * @memberof MerchantService
     */
    name?: string;
    /**
     * 图标ID
     * @type {string}
     * @memberof MerchantService
     */
    iconFileId?: string;
    /**
     * 图标路径
     * @type {string}
     * @memberof MerchantService
     */
    iconPath?: string;
}

/**
 * 
 * @export
 * @interface MobilePasswordLoginInfo
 */
export interface MobilePasswordLoginInfo extends CommonLoginInfo {
    /**
     * 手机号（仅限大陆地区）
     * @type {string}
     * @memberof MobilePasswordLoginInfo
     */
    mobile: string;
    /**
     * 密码
     * @type {string}
     * @memberof MobilePasswordLoginInfo
     */
    password: string;
    /**
     * 设备id
     * @type {string}
     * @memberof MobilePasswordLoginInfo
     */
    deviceId: string;
}

/**
 * @export
 * @namespace MobilePasswordLoginInfo
 */
export namespace MobilePasswordLoginInfo {
}

/**
 * 
 * @export
 * @interface MobileQuickLoginInfo
 */
export interface MobileQuickLoginInfo extends CommonLoginInfo {
    /**
     * 手机号（仅限大陆地区）
     * @type {string}
     * @memberof MobileQuickLoginInfo
     */
    mobile: string;
    /**
     * 手机验证码
     * @type {string}
     * @memberof MobileQuickLoginInfo
     */
    verifyCode: string;
    /**
     * 设备id
     * @type {string}
     * @memberof MobileQuickLoginInfo
     */
    deviceId: string;
}

/**
 * @export
 * @namespace MobileQuickLoginInfo
 */
export namespace MobileQuickLoginInfo {
}

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * http状态码
     * @type {number}
     * @memberof ModelError
     */
    httpCode: number;
    /**
     * 错误码信息。格式：{errorType}.{resourceName}.{reason}
     * @type {string}
     * @memberof ModelError
     */
    errorCode: string;
}

/**
 * 
 * @export
 * @interface OrderDetailInfo
 */
export interface OrderDetailInfo {
    /**
     * 订单详情Id
     * @type {string}
     * @memberof OrderDetailInfo
     */
    id?: string;
    /**
     * 券号
     * @type {string}
     * @memberof OrderDetailInfo
     */
    productSn?: string;
    /**
     * 退款状态（0:无退款 1:退款成功 2.申请中3.审批通过退款中 4:第三方退款中 5:退款失败）
     * @type {number}
     * @memberof OrderDetailInfo
     */
    refundStatus?: number;
    /**
     * 退款Id
     * @type {string}
     * @memberof OrderDetailInfo
     */
    refundId?: string;
    /**
     * 能否退款
     * @type {boolean}
     * @memberof OrderDetailInfo
     */
    canRefund?: boolean;
    /**
     * 使用状态（0:未使用 1已使用）
     * @type {number}
     * @memberof OrderDetailInfo
     */
    useStatus?: number;
}

/**
 * 
 * @export
 * @interface OrderInfo
 */
export interface OrderInfo {
    /**
     * 订单id
     * @type {string}
     * @memberof OrderInfo
     */
    orderId?: string;
    /**
     * 订单号
     * @type {string}
     * @memberof OrderInfo
     */
    orderSn?: string;
    /**
     * 订单类型（1.优惠买单，2.商品购买）
     * @type {number}
     * @memberof OrderInfo
     */
    orderType?: number;
    /**
     * 状态(0.待支付1.待使用2.待评价3.退款中4.退款成功5.已取消)
     * @type {number}
     * @memberof OrderInfo
     */
    status?: number;
    /**
     * 原始总价
     * @type {number}
     * @memberof OrderInfo
     */
    totalMoney?: number;
    /**
     * 实际支付价格
     * @type {number}
     * @memberof OrderInfo
     */
    actualMoney?: number;
    /**
     * 优惠券金额
     * @type {number}
     * @memberof OrderInfo
     */
    couponMoney?: number;
    /**
     * 折扣金额
     * @type {number}
     * @memberof OrderInfo
     */
    discountMoney?: number;
    /**
     * 下单时间
     * @type {Date}
     * @memberof OrderInfo
     */
    createTime?: Date;
    /**
     * 手机号
     * @type {string}
     * @memberof OrderInfo
     */
    userMobile?: string;
    /**
     * 能否退款
     * @type {boolean}
     * @memberof OrderInfo
     */
    canRefund?: boolean;
    /**
     * 过期时间
     * @type {Date}
     * @memberof OrderInfo
     */
    expiryTime?: Date;
    /**
     * 支付时间
     * @type {Date}
     * @memberof OrderInfo
     */
    payTime?: Date;
    /**
     * 
     * @type {OrderInfoMerchant}
     * @memberof OrderInfo
     */
    merchant?: OrderInfoMerchant;
    /**
     * 
     * @type {OrderInfoProduct}
     * @memberof OrderInfo
     */
    product?: OrderInfoProduct;
    /**
     * 
     * @type {Array<OrderDetailInfo>}
     * @memberof OrderInfo
     */
    orderDetails?: Array<OrderDetailInfo>;
}

/**
 * 
 * @export
 * @interface OrderInfoMerchant
 */
export interface OrderInfoMerchant {
    /**
     * 商家ID
     * @type {string}
     * @memberof OrderInfoMerchant
     */
    id?: string;
    /**
     * 商家名称
     * @type {string}
     * @memberof OrderInfoMerchant
     */
    name?: string;
    /**
     * 商家地址
     * @type {string}
     * @memberof OrderInfoMerchant
     */
    detailAddress?: string;
    /**
     * 经度
     * @type {number}
     * @memberof OrderInfoMerchant
     */
    longitude?: number;
    /**
     * 纬度
     * @type {number}
     * @memberof OrderInfoMerchant
     */
    latitude?: number;
    /**
     * logo地址
     * @type {string}
     * @memberof OrderInfoMerchant
     */
    logoPath?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderInfoMerchant
     */
    contactTels?: Array<string>;
}

/**
 * 
 * @export
 * @interface OrderInfoProduct
 */
export interface OrderInfoProduct {
    /**
     * 商品Id
     * @type {string}
     * @memberof OrderInfoProduct
     */
    id?: string;
    /**
     * 商品类型
     * @type {number}
     * @memberof OrderInfoProduct
     */
    type?: number;
    /**
     * 商品名称
     * @type {string}
     * @memberof OrderInfoProduct
     */
    name?: string;
    /**
     * 商品数量
     * @type {number}
     * @memberof OrderInfoProduct
     */
    quantity?: number;
    /**
     * 有效期至
     * @type {Date}
     * @memberof OrderInfoProduct
     */
    effectEndTime?: Date;
    /**
     * 市场价
     * @type {number}
     * @memberof OrderInfoProduct
     */
    marketPrice?: number;
    /**
     * 优惠价
     * @type {number}
     * @memberof OrderInfoProduct
     */
    favorablePrice?: number;
}

/**
 * 
 * @export
 * @interface OrderSimpleInfo
 */
export interface OrderSimpleInfo {
    /**
     * 订单主表Id
     * @type {string}
     * @memberof OrderSimpleInfo
     */
    orderId?: string;
    /**
     * 订单号
     * @type {string}
     * @memberof OrderSimpleInfo
     */
    orderSn?: string;
}

/**
 * 
 * @export
 * @interface Page
 */
export interface Page {
    /**
     * 是否有下一页(\"true\"-是; \"false\"-否;)
     * @type {string}
     * @memberof Page
     */
    hasNext?: string;
}

/**
 * 
 * @export
 * @interface PayWay
 */
export interface PayWay {
    /**
     * id
     * @type {string}
     * @memberof PayWay
     */
    id?: string;
    /**
     * 名称
     * @type {string}
     * @memberof PayWay
     */
    name?: string;
    /**
     * 支付方式iconUrl
     * @type {string}
     * @memberof PayWay
     */
    iconUrl?: string;
    /**
     * 限额
     * @type {string}
     * @memberof PayWay
     */
    quota?: string;
    /**
     * 0禁用1启用
     * @type {number}
     * @memberof PayWay
     */
    status?: PayWay.StatusEnum;
}

/**
 * @export
 * @namespace PayWay
 */
export namespace PayWay {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1
    }
}

/**
 * 
 * @export
 * @interface PlusMemberType
 */
export interface PlusMemberType {
    /**
     * 会员类型
     * @type {number}
     * @memberof PlusMemberType
     */
    type?: number;
    /**
     * 会员名称
     * @type {string}
     * @memberof PlusMemberType
     */
    name?: string;
    /**
     * 会员描述
     * @type {string}
     * @memberof PlusMemberType
     */
    description?: string;
    /**
     * 会员原价
     * @type {number}
     * @memberof PlusMemberType
     */
    originalPrice?: number;
    /**
     * 会员现价
     * @type {number}
     * @memberof PlusMemberType
     */
    currentPrice?: number;
    /**
     * 会员有效期
     * @type {number}
     * @memberof PlusMemberType
     */
    days?: number;
}

/**
 * 
 * @export
 * @interface PointsDetail
 */
export interface PointsDetail {
    /**
     * 积分来源名称
     * @type {string}
     * @memberof PointsDetail
     */
    title?: string;
    /**
     * 积分
     * @type {number}
     * @memberof PointsDetail
     */
    point?: number;
    /**
     * 积分创建时间
     * @type {Date}
     * @memberof PointsDetail
     */
    createTime?: Date;
}

/**
 * 
 * @export
 * @interface PrePayInfo
 */
export interface PrePayInfo {
    /**
     * 
     * @type {PrePayInfoWechatPay}
     * @memberof PrePayInfo
     */
    wechatPay?: PrePayInfoWechatPay;
    /**
     * 阿里支付
     * @type {string}
     * @memberof PrePayInfo
     */
    aliPay?: string;
}

/**
 * 微信支付
 * @export
 * @interface PrePayInfoWechatPay
 */
export interface PrePayInfoWechatPay {
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    _package?: string;
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    appid?: string;
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    sign?: string;
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    partnerid?: string;
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    prepayid?: string;
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    noncestr?: string;
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    timestamp?: string;
}

/**
 * 
 * @export
 * @interface ProductBrief
 */
export interface ProductBrief {
    /**
     * 产品（消费券）ID
     * @type {string}
     * @memberof ProductBrief
     */
    id?: string;
    /**
     * 商品类型（1：代金券；2：套餐；3：会员卡）
     * @type {number}
     * @memberof ProductBrief
     */
    type?: number;
    /**
     * 产品（消费券）名称
     * @type {string}
     * @memberof ProductBrief
     */
    name?: string;
    /**
     * 使用开始时间
     * @type {string}
     * @memberof ProductBrief
     */
    effectStartTime?: string;
    /**
     * 使用结束时间
     * @type {string}
     * @memberof ProductBrief
     */
    effectEndTime?: string;
    /**
     * 可用时间描述
     * @type {string}
     * @memberof ProductBrief
     */
    availableTimeDesc?: string;
    /**
     * 原价
     * @type {number}
     * @memberof ProductBrief
     */
    marketPrice?: number;
    /**
     * 优惠价
     * @type {number}
     * @memberof ProductBrief
     */
    favorablePrice?: number;
    /**
     * Plus会员价格
     * @type {number}
     * @memberof ProductBrief
     */
    plusFavorablePrice?: number;
}

/**
 * 
 * @export
 * @interface ProductContent
 */
export interface ProductContent {
    /**
     * 主键ID
     * @type {string}
     * @memberof ProductContent
     */
    id?: string;
    /**
     * 名称
     * @type {string}
     * @memberof ProductContent
     */
    name?: string;
    /**
     * 价格
     * @type {number}
     * @memberof ProductContent
     */
    price?: number;
    /**
     * 数量
     * @type {number}
     * @memberof ProductContent
     */
    count?: number;
    /**
     * 图片路径
     * @type {string}
     * @memberof ProductContent
     */
    picPath?: string;
}

/**
 * 
 * @export
 * @interface ProductDetail
 */
export interface ProductDetail extends ProductBrief {
    /**
     * 不可用时间描述
     * @type {string}
     * @memberof ProductDetail
     */
    unavailableTimeDesc?: string;
    /**
     * 使用规则
     * @type {Array<string>}
     * @memberof ProductDetail
     */
    useRules?: Array<string>;
}

/**
 * 
 * @export
 * @interface Province
 */
export interface Province {
    /**
     * 省份ID
     * @type {string}
     * @memberof Province
     */
    id?: string;
    /**
     * 省份名称
     * @type {string}
     * @memberof Province
     */
    name?: string;
    /**
     * 
     * @type {Array<City>}
     * @memberof Province
     */
    cities?: Array<City>;
}

/**
 * 
 * @export
 * @interface RefundInfo
 */
export interface RefundInfo {
    /**
     * 退款状态（0:无退款 1:退款成功 2.申请中3.审批通过退款中 4:第三方退款中 5:退款失败）
     * @type {number}
     * @memberof RefundInfo
     */
    refundStatus?: number;
    /**
     * 总价
     * @type {number}
     * @memberof RefundInfo
     */
    money?: number;
    /**
     * 退回账户
     * @type {string}
     * @memberof RefundInfo
     */
    account?: string;
    /**
     * 申请时间
     * @type {Date}
     * @memberof RefundInfo
     */
    createTime?: Date;
    /**
     * 审核时间
     * @type {Date}
     * @memberof RefundInfo
     */
    auditTime?: Date;
    /**
     * 退款时间
     * @type {Date}
     * @memberof RefundInfo
     */
    payTime?: Date;
    /**
     * 退款方式
     * @type {number}
     * @memberof RefundInfo
     */
    payWay?: number;
}

/**
 * 
 * @export
 * @interface RefundList
 */
export interface RefundList {
    /**
     * 退款状态（0:无退款 1:退款成功 2.申请中3.审批通过退款中 4:第三方退款中 5:退款失败）
     * @type {number}
     * @memberof RefundList
     */
    status?: number;
    /**
     * 总价
     * @type {number}
     * @memberof RefundList
     */
    money?: number;
    /**
     * 退款id
     * @type {string}
     * @memberof RefundList
     */
    refundId?: string;
    /**
     * 预计到账时间
     * @type {string}
     * @memberof RefundList
     */
    receiveTime?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RefundList
     */
    productSn?: Array<string>;
}

/**
 * 
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * 商圈ID
     * @type {string}
     * @memberof Region
     */
    id?: string;
    /**
     * 商圈名称
     * @type {string}
     * @memberof Region
     */
    name?: string;
    /**
     * 区域ID
     * @type {string}
     * @memberof Region
     */
    areaId?: string;
}

/**
 * 
 * @export
 * @interface SubmitOrder
 */
export interface SubmitOrder {
    /**
     * 商家Id
     * @type {string}
     * @memberof SubmitOrder
     */
    merchantId?: string;
    /**
     * 商家版本Id
     * @type {number}
     * @memberof SubmitOrder
     */
    merchantVersionId?: number;
    /**
     * 订单实际总额
     * @type {number}
     * @memberof SubmitOrder
     */
    totalMoney?: number;
    /**
     * 实际支付总额
     * @type {number}
     * @memberof SubmitOrder
     */
    actualMoney?: number;
    /**
     * 不参与优惠总额
     * @type {number}
     * @memberof SubmitOrder
     */
    outOfDiscountMoney?: number;
    /**
     * 优惠券Id
     * @type {string}
     * @memberof SubmitOrder
     */
    couponId?: string;
    /**
     * 平台类型 2.app 3.小程序
     * @type {number}
     * @memberof SubmitOrder
     */
    platform?: number;
}

/**
 * 
 * @export
 * @interface SubmitOrderAndPlusMemberOrder
 */
export interface SubmitOrderAndPlusMemberOrder {
    /**
     * 商家Id
     * @type {string}
     * @memberof SubmitOrderAndPlusMemberOrder
     */
    merchantId?: string;
    /**
     * 商家版本Id
     * @type {string}
     * @memberof SubmitOrderAndPlusMemberOrder
     */
    merchantVersionId?: string;
    /**
     * 城市Id
     * @type {string}
     * @memberof SubmitOrderAndPlusMemberOrder
     */
    cityId?: string;
    /**
     * 订单实际总额
     * @type {number}
     * @memberof SubmitOrderAndPlusMemberOrder
     */
    totalMoney?: number;
    /**
     * 实际支付总额
     * @type {number}
     * @memberof SubmitOrderAndPlusMemberOrder
     */
    actualMoney?: number;
    /**
     * 不参与优惠总额
     * @type {number}
     * @memberof SubmitOrderAndPlusMemberOrder
     */
    outOfDiscountMoney?: number;
    /**
     * 优惠券Id
     * @type {string}
     * @memberof SubmitOrderAndPlusMemberOrder
     */
    couponId?: string;
    /**
     * plus类型-Plus会员类型（1：月度会员；2：季度会员；3：年度会员；4：连续包月会员）
     * @type {number}
     * @memberof SubmitOrderAndPlusMemberOrder
     */
    plusType?: number;
    /**
     * 支付方式Id
     * @type {number}
     * @memberof SubmitOrderAndPlusMemberOrder
     */
    payWayId?: number;
}

/**
 * 
 * @export
 * @interface SubmitProductOrder
 */
export interface SubmitProductOrder {
    /**
     * 商家Id
     * @type {string}
     * @memberof SubmitProductOrder
     */
    merchantId?: string;
    /**
     * 商家版本Id
     * @type {number}
     * @memberof SubmitProductOrder
     */
    merchantVersionId?: number;
    /**
     * 总金额
     * @type {number}
     * @memberof SubmitProductOrder
     */
    actualMoney?: number;
    /**
     * 商品Id
     * @type {string}
     * @memberof SubmitProductOrder
     */
    productId?: string;
    /**
     * 商品版本Id
     * @type {string}
     * @memberof SubmitProductOrder
     */
    productVersionId?: string;
    /**
     * 商品数量
     * @type {number}
     * @memberof SubmitProductOrder
     */
    productQuantity?: number;
}

/**
 * 
 * @export
 * @interface Topic
 */
export interface Topic {
    /**
     * 专题ID
     * @type {string}
     * @memberof Topic
     */
    id?: string;
    /**
     * 专题名称
     * @type {string}
     * @memberof Topic
     */
    name?: string;
    /**
     * 封面图片路径
     * @type {string}
     * @memberof Topic
     */
    coverPath?: string;
    /**
     * 广告语
     * @type {string}
     * @memberof Topic
     */
    slogan?: string;
}

/**
 * 用户结构
 * @export
 * @interface User
 */
export interface User {
    /**
     * 用户id
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 昵称
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * 手机号
     * @type {string}
     * @memberof User
     */
    mobile?: string;
    /**
     * 会员等级
     * @type {string}
     * @memberof User
     */
    level?: string;
    /**
     * 头像路径
     * @type {string}
     * @memberof User
     */
    headPicture?: string;
    /**
     * 生日
     * @type {Date}
     * @memberof User
     */
    birthday?: Date;
    /**
     * 性别
     * @type {number}
     * @memberof User
     */
    sex?: number;
    /**
     * 用户积分总量
     * @type {number}
     * @memberof User
     */
    point?: number;
    /**
     * 用户plus状态 0:默认无开通 1.开通中 2已过期
     * @type {number}
     * @memberof User
     */
    plusStatus?: number;
    /**
     * 用户plus过期时间
     * @type {Date}
     * @memberof User
     */
    plusEndTime?: Date;
    /**
     * plus会员累计节省优惠金额
     * @type {number}
     * @memberof User
     */
    plusDiscountAmount?: number;
    /**
     * 用户是否绑定微信
     * @type {boolean}
     * @memberof User
     */
    isBindWechat?: boolean;
    /**
     * 用户是否签到
     * @type {boolean}
     * @memberof User
     */
    isSign?: boolean;
    /**
     * true开通过plus会员,false没有开通过
     * @type {boolean}
     * @memberof User
     */
    userPlusStatus?: boolean;
    /**
     * 待支付数量
     * @type {number}
     * @memberof User
     */
    waitPayCount?: number;
    /**
     * 待使用数量
     * @type {number}
     * @memberof User
     */
    waitUseCount?: number;
    /**
     * 退款中数量
     * @type {number}
     * @memberof User
     */
    refundingCount?: number;
}

/**
 * 
 * @export
 * @interface WechatLoginInfo
 */
export interface WechatLoginInfo extends CommonLoginInfo {
    /**
     * 
     * @type {string}
     * @memberof WechatLoginInfo
     */
    openId: string;
    /**
     * 第三方平台昵称
     * @type {string}
     * @memberof WechatLoginInfo
     */
    nikeName: string;
    /**
     * 第三方平台性别(普通用户性别，1为男性，2为女性)
     * @type {string}
     * @memberof WechatLoginInfo
     */
    sex: string;
    /**
     * 第三方平台头像
     * @type {string}
     * @memberof WechatLoginInfo
     */
    headerImg: string;
    /**
     * 微信unionid(用户统一标识。针对一个微信开放平台帐号下的应用，同一用户的unionid是唯一的。)
     * @type {string}
     * @memberof WechatLoginInfo
     */
    unionId: string;
    /**
     * 
     * @type {string}
     * @memberof WechatLoginInfo
     */
    deviceId?: string;
}

/**
 * @export
 * @namespace WechatLoginInfo
 */
export namespace WechatLoginInfo {
}


/**
 * ActivityApi - fetch parameter creator
 * @export
 */
export const ActivityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端获取城市轮播广告图(首页)
         * @param {getCityBannersBody} [body8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityBanners(body8?: getCityBannersBody, options: any = {}): FetchArgs {
            const localVarPath = `/getCityBanners`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCityBannersBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body8 || {}) : (body8 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivityApi - functional programming interface
 * @export
 */
export const ActivityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端获取城市轮播广告图(首页)
         * @param {getCityBannersBody} [body8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityBanners(body8?: getCityBannersBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ActivityApiFetchParamCreator(configuration).getCityBanners(body8, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ActivityApi - factory interface
 * @export
 */
export const ActivityApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary APP端获取城市轮播广告图(首页)
         * @param {getCityBannersBody} [body8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityBanners(body8?: getCityBannersBody, options?: any) {
            return ActivityApiFp(configuration).getCityBanners(body8, options)(fetch, basePath);
        },
    };
};

/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */
export class ActivityApi extends BaseAPI {
    /**
     * 
     * @summary APP端获取城市轮播广告图(首页)
     * @param {getCityBannersBody} [body8] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public getCityBanners(body8?: getCityBannersBody, options?: any) {
        return ActivityApiFp(this.configuration).getCityBanners(body8, options)(this.fetch, this.basePath);
    }

}

/**
 * BasicApi - fetch parameter creator
 * @export
 */
export const BasicApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端获取城市列表
         * @param {getCitiesBody} [body23] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCities(body23?: getCitiesBody, options: any = {}): FetchArgs {
            const localVarPath = `/getCities`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCitiesBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body23 || {}) : (body23 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过城市Id批量获取城市信息
         * @param {getCitiesByIdsBody} [body14] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitiesByIds(body14?: getCitiesByIdsBody, options: any = {}): FetchArgs {
            const localVarPath = `/basic/getCitiesByIds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCitiesByIdsBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body14 || {}) : (body14 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据Id获取城市信息
         * @param {getCityByIdBody} [body13] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityById(body13?: getCityByIdBody, options: any = {}): FetchArgs {
            const localVarPath = `/basic/getCityById`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCityByIdBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body13 || {}) : (body13 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取城市场景列表
         * @param {getCityTopicsBody} [body16] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityTopics(body16?: getCityTopicsBody, options: any = {}): FetchArgs {
            const localVarPath = `/getCityTopics`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCityTopicsBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body16 || {}) : (body16 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取热门搜索关键字列表
         * @param {getHotSearchTipsBody} [body26] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotSearchTips(body26?: getHotSearchTipsBody, options: any = {}): FetchArgs {
            const localVarPath = `/getHotSearchTips`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getHotSearchTipsBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body26 || {}) : (body26 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端根据地理位置获取城市
         * @param {getLocationCityBody} [body15] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationCity(body15?: getLocationCityBody, options: any = {}): FetchArgs {
            const localVarPath = `/getLocationCity`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getLocationCityBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body15 || {}) : (body15 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取省、市、区、商圈数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvinces(options: any = {}): FetchArgs {
            const localVarPath = `/basic/getProvinces`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取推荐关键字列表
         * @param {getRecommandSearchTipsBody} [body25] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommandSearchTips(body25?: getRecommandSearchTipsBody, options: any = {}): FetchArgs {
            const localVarPath = `/getRecommandSearchTips`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getRecommandSearchTipsBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body25 || {}) : (body25 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取区域商圈列表
         * @param {getRegionsBody} [body24] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegions(body24?: getRegionsBody, options: any = {}): FetchArgs {
            const localVarPath = `/getRegions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getRegionsBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body24 || {}) : (body24 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicApi - functional programming interface
 * @export
 */
export const BasicApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端获取城市列表
         * @param {getCitiesBody} [body23] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCities(body23?: getCitiesBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20012> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getCities(body23, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 通过城市Id批量获取城市信息
         * @param {getCitiesByIdsBody} [body14] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitiesByIds(body14?: getCitiesByIdsBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<InlineResponse2004>> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getCitiesByIds(body14, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 根据Id获取城市信息
         * @param {getCityByIdBody} [body13] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityById(body13?: getCityByIdBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CityInformation> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getCityById(body13, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取城市场景列表
         * @param {getCityTopicsBody} [body16] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityTopics(body16?: getCityTopicsBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getCityTopics(body16, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取热门搜索关键字列表
         * @param {getHotSearchTipsBody} [body26] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotSearchTips(body26?: getHotSearchTipsBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20015> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getHotSearchTips(body26, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端根据地理位置获取城市
         * @param {getLocationCityBody} [body15] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationCity(body15?: getLocationCityBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2005> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getLocationCity(body15, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取省、市、区、商圈数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvinces(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20018> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getProvinces(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取推荐关键字列表
         * @param {getRecommandSearchTipsBody} [body25] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommandSearchTips(body25?: getRecommandSearchTipsBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20014> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getRecommandSearchTips(body25, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取区域商圈列表
         * @param {getRegionsBody} [body24] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegions(body24?: getRegionsBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20013> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getRegions(body24, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BasicApi - factory interface
 * @export
 */
export const BasicApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary APP端获取城市列表
         * @param {getCitiesBody} [body23] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCities(body23?: getCitiesBody, options?: any) {
            return BasicApiFp(configuration).getCities(body23, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 通过城市Id批量获取城市信息
         * @param {getCitiesByIdsBody} [body14] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitiesByIds(body14?: getCitiesByIdsBody, options?: any) {
            return BasicApiFp(configuration).getCitiesByIds(body14, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 根据Id获取城市信息
         * @param {getCityByIdBody} [body13] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityById(body13?: getCityByIdBody, options?: any) {
            return BasicApiFp(configuration).getCityById(body13, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取城市场景列表
         * @param {getCityTopicsBody} [body16] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityTopics(body16?: getCityTopicsBody, options?: any) {
            return BasicApiFp(configuration).getCityTopics(body16, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取热门搜索关键字列表
         * @param {getHotSearchTipsBody} [body26] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotSearchTips(body26?: getHotSearchTipsBody, options?: any) {
            return BasicApiFp(configuration).getHotSearchTips(body26, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端根据地理位置获取城市
         * @param {getLocationCityBody} [body15] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationCity(body15?: getLocationCityBody, options?: any) {
            return BasicApiFp(configuration).getLocationCity(body15, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取省、市、区、商圈数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvinces(options?: any) {
            return BasicApiFp(configuration).getProvinces(options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取推荐关键字列表
         * @param {getRecommandSearchTipsBody} [body25] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommandSearchTips(body25?: getRecommandSearchTipsBody, options?: any) {
            return BasicApiFp(configuration).getRecommandSearchTips(body25, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取区域商圈列表
         * @param {getRegionsBody} [body24] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegions(body24?: getRegionsBody, options?: any) {
            return BasicApiFp(configuration).getRegions(body24, options)(fetch, basePath);
        },
    };
};

/**
 * BasicApi - object-oriented interface
 * @export
 * @class BasicApi
 * @extends {BaseAPI}
 */
export class BasicApi extends BaseAPI {
    /**
     * 
     * @summary APP端获取城市列表
     * @param {getCitiesBody} [body23] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getCities(body23?: getCitiesBody, options?: any) {
        return BasicApiFp(this.configuration).getCities(body23, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 通过城市Id批量获取城市信息
     * @param {getCitiesByIdsBody} [body14] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getCitiesByIds(body14?: getCitiesByIdsBody, options?: any) {
        return BasicApiFp(this.configuration).getCitiesByIds(body14, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 根据Id获取城市信息
     * @param {getCityByIdBody} [body13] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getCityById(body13?: getCityByIdBody, options?: any) {
        return BasicApiFp(this.configuration).getCityById(body13, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取城市场景列表
     * @param {getCityTopicsBody} [body16] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getCityTopics(body16?: getCityTopicsBody, options?: any) {
        return BasicApiFp(this.configuration).getCityTopics(body16, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取热门搜索关键字列表
     * @param {getHotSearchTipsBody} [body26] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getHotSearchTips(body26?: getHotSearchTipsBody, options?: any) {
        return BasicApiFp(this.configuration).getHotSearchTips(body26, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端根据地理位置获取城市
     * @param {getLocationCityBody} [body15] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getLocationCity(body15?: getLocationCityBody, options?: any) {
        return BasicApiFp(this.configuration).getLocationCity(body15, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取省、市、区、商圈数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getProvinces(options?: any) {
        return BasicApiFp(this.configuration).getProvinces(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取推荐关键字列表
     * @param {getRecommandSearchTipsBody} [body25] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getRecommandSearchTips(body25?: getRecommandSearchTipsBody, options?: any) {
        return BasicApiFp(this.configuration).getRecommandSearchTips(body25, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取区域商圈列表
     * @param {getRegionsBody} [body24] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getRegions(body24?: getRegionsBody, options?: any) {
        return BasicApiFp(this.configuration).getRegions(body24, options)(this.fetch, this.basePath);
    }

}

/**
 * ManagerApi - fetch parameter creator
 * @export
 */
export const ManagerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 根据店铺获取用户的优惠券
         * @param {getCouponByMerchentBody} [body47] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponByMerchent(body47?: getCouponByMerchentBody, options: any = {}): FetchArgs {
            const localVarPath = `/manager/getCouponByMerchent`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCouponByMerchentBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body47 || {}) : (body47 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManagerApi - functional programming interface
 * @export
 */
export const ManagerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 根据店铺获取用户的优惠券
         * @param {getCouponByMerchentBody} [body47] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponByMerchent(body47?: getCouponByMerchentBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20030> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).getCouponByMerchent(body47, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ManagerApi - factory interface
 * @export
 */
export const ManagerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 根据店铺获取用户的优惠券
         * @param {getCouponByMerchentBody} [body47] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponByMerchent(body47?: getCouponByMerchentBody, options?: any) {
            return ManagerApiFp(configuration).getCouponByMerchent(body47, options)(fetch, basePath);
        },
    };
};

/**
 * ManagerApi - object-oriented interface
 * @export
 * @class ManagerApi
 * @extends {BaseAPI}
 */
export class ManagerApi extends BaseAPI {
    /**
     * 
     * @summary 根据店铺获取用户的优惠券
     * @param {getCouponByMerchentBody} [body47] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public getCouponByMerchent(body47?: getCouponByMerchentBody, options?: any) {
        return ManagerApiFp(this.configuration).getCouponByMerchent(body47, options)(this.fetch, this.basePath);
    }

}

/**
 * MerchantApi - fetch parameter creator
 * @export
 */
export const MerchantApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 发表评论
         * @param {Comment} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addComment(comment?: Comment, options: any = {}): FetchArgs {
            const localVarPath = `/merchant/comment/addComment`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"Comment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(comment || {}) : (comment || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 兑换优惠券
         * @param {exchangeCouponBody} [body52] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeCoupon(body52?: exchangeCouponBody, options: any = {}): FetchArgs {
            const localVarPath = `/merchant/coupon/exchangeCoupon`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"exchangeCouponBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body52 || {}) : (body52 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端商家详情查询
         * @param {getAppMerchantDetailBody} [body18] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppMerchantDetail(body18?: getAppMerchantDetailBody, options: any = {}): FetchArgs {
            const localVarPath = `/getMerchantDetail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getAppMerchantDetailBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body18 || {}) : (body18 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端商家查询(根据条件查询店铺列表)
         * @param {getAppMerchantsBody} [body17] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppMerchants(body17?: getAppMerchantsBody, options: any = {}): FetchArgs {
            const localVarPath = `/getAppMerchants`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getAppMerchantsBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body17 || {}) : (body17 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取能使用的优惠券
         * @param {getCanUseCouponListBody} [body50] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCanUseCouponList(body50?: getCanUseCouponListBody, options: any = {}): FetchArgs {
            const localVarPath = `/merchant/coupon/getCanUseCouponList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCanUseCouponListBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body50 || {}) : (body50 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取城市全部（商家）分类
         * @param {getCityCategoriesBody} [body12] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityCategories(body12?: getCityCategoriesBody, options: any = {}): FetchArgs {
            const localVarPath = `/getCityCategories`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCityCategoriesBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body12 || {}) : (body12 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取城市推荐（商家）分类
         * @param {getCityRecommandCategoriesBody} [body9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityRecommandCategories(body9?: getCityRecommandCategoriesBody, options: any = {}): FetchArgs {
            const localVarPath = `/getCityRecommandCategories`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCityRecommandCategoriesBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body9 || {}) : (body9 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取评论详情
         * @param {getCommentDetailBody} [body49] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentDetail(body49?: getCommentDetailBody, options: any = {}): FetchArgs {
            const localVarPath = `/merchant/comment/getCommentDetail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCommentDetailBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body49 || {}) : (body49 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取评论列表
         * @param {getCommentListBody} [body48] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentList(body48?: getCommentListBody, options: any = {}): FetchArgs {
            const localVarPath = `/merchant/comment/getCommentList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCommentListBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body48 || {}) : (body48 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取优惠券适用商家列表
         * @param {getCouponApplyMerchantsBriefBody} [body55] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponApplyMerchantsBrief(body55?: getCouponApplyMerchantsBriefBody, options: any = {}): FetchArgs {
            const localVarPath = `/merchant/voucherPackage/getCouponApplyMerchantsBrief`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCouponApplyMerchantsBriefBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body55 || {}) : (body55 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户单日能使用的优惠券
         * @param {getDailyCanUseCouponListBody} [body51] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyCanUseCouponList(body51?: getDailyCanUseCouponListBody, options: any = {}): FetchArgs {
            const localVarPath = `/merchant/coupon/getDailyCanUseCouponList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getDailyCanUseCouponListBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body51 || {}) : (body51 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户券包中的过期优惠券列表
         * @param {getDiscountCouponExpireListBody} [body54] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscountCouponExpireList(body54?: getDiscountCouponExpireListBody, options: any = {}): FetchArgs {
            const localVarPath = `/merchant/voucherPackage/getDiscountCouponExpireList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getDiscountCouponExpireListBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body54 || {}) : (body54 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户券包中的优惠券列表
         * @param {getDiscountCouponListBody} [body53] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscountCouponList(body53?: getDiscountCouponListBody, options: any = {}): FetchArgs {
            const localVarPath = `/merchant/voucherPackage/getDiscountCouponList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getDiscountCouponListBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body53 || {}) : (body53 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取商家图片信息
         * @param {getMerchantAttachmentsBody} [body20] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantAttachments(body20?: getMerchantAttachmentsBody, options: any = {}): FetchArgs {
            const localVarPath = `/getMerchantAttachments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getMerchantAttachmentsBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body20 || {}) : (body20 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取商家图文详情
         * @param {getMerchantDescBody} [body19] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDesc(body19?: getMerchantDescBody, options: any = {}): FetchArgs {
            const localVarPath = `/getMerchantDesc`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getMerchantDescBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body19 || {}) : (body19 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取商家菜品信息
         * @param {getMerchantDishesBody} [body21] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDishes(body21?: getMerchantDishesBody, options: any = {}): FetchArgs {
            const localVarPath = `/getMerchantDishes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getMerchantDishesBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body21 || {}) : (body21 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取商家服务信息
         * @param {getMerchantServicesBody} [body22] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantServices(body22?: getMerchantServicesBody, options: any = {}): FetchArgs {
            const localVarPath = `/getMerchantServices`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getMerchantServicesBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body22 || {}) : (body22 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 点赞
         * @param {Like} [like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        like(like?: Like, options: any = {}): FetchArgs {
            const localVarPath = `/merchant/comment/like`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"Like" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(like || {}) : (like || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantApi - functional programming interface
 * @export
 */
export const MerchantApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 发表评论
         * @param {Comment} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addComment(comment?: Comment, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).addComment(comment, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 兑换优惠券
         * @param {exchangeCouponBody} [body52] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeCoupon(body52?: exchangeCouponBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20035> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).exchangeCoupon(body52, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端商家详情查询
         * @param {getAppMerchantDetailBody} [body18] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppMerchantDetail(body18?: getAppMerchantDetailBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2007> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getAppMerchantDetail(body18, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端商家查询(根据条件查询店铺列表)
         * @param {getAppMerchantsBody} [body17] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppMerchants(body17?: getAppMerchantsBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2006> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getAppMerchants(body17, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取能使用的优惠券
         * @param {getCanUseCouponListBody} [body50] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCanUseCouponList(body50?: getCanUseCouponListBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20033> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getCanUseCouponList(body50, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取城市全部（商家）分类
         * @param {getCityCategoriesBody} [body12] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityCategories(body12?: getCityCategoriesBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getCityCategories(body12, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取城市推荐（商家）分类
         * @param {getCityRecommandCategoriesBody} [body9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityRecommandCategories(body9?: getCityRecommandCategoriesBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getCityRecommandCategories(body9, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取评论详情
         * @param {getCommentDetailBody} [body49] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentDetail(body49?: getCommentDetailBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20032> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getCommentDetail(body49, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取评论列表
         * @param {getCommentListBody} [body48] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentList(body48?: getCommentListBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20031> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getCommentList(body48, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取优惠券适用商家列表
         * @param {getCouponApplyMerchantsBriefBody} [body55] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponApplyMerchantsBrief(body55?: getCouponApplyMerchantsBriefBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20038> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getCouponApplyMerchantsBrief(body55, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户单日能使用的优惠券
         * @param {getDailyCanUseCouponListBody} [body51] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyCanUseCouponList(body51?: getDailyCanUseCouponListBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20034> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getDailyCanUseCouponList(body51, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户券包中的过期优惠券列表
         * @param {getDiscountCouponExpireListBody} [body54] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscountCouponExpireList(body54?: getDiscountCouponExpireListBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20037> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getDiscountCouponExpireList(body54, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户券包中的优惠券列表
         * @param {getDiscountCouponListBody} [body53] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscountCouponList(body53?: getDiscountCouponListBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20036> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getDiscountCouponList(body53, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取商家图片信息
         * @param {getMerchantAttachmentsBody} [body20] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantAttachments(body20?: getMerchantAttachmentsBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2009> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getMerchantAttachments(body20, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取商家图文详情
         * @param {getMerchantDescBody} [body19] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDesc(body19?: getMerchantDescBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2008> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getMerchantDesc(body19, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取商家菜品信息
         * @param {getMerchantDishesBody} [body21] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDishes(body21?: getMerchantDishesBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20010> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getMerchantDishes(body21, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取商家服务信息
         * @param {getMerchantServicesBody} [body22] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantServices(body22?: getMerchantServicesBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20011> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getMerchantServices(body22, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 点赞
         * @param {Like} [like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        like(like?: Like, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).like(like, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MerchantApi - factory interface
 * @export
 */
export const MerchantApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 发表评论
         * @param {Comment} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addComment(comment?: Comment, options?: any) {
            return MerchantApiFp(configuration).addComment(comment, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 兑换优惠券
         * @param {exchangeCouponBody} [body52] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeCoupon(body52?: exchangeCouponBody, options?: any) {
            return MerchantApiFp(configuration).exchangeCoupon(body52, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端商家详情查询
         * @param {getAppMerchantDetailBody} [body18] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppMerchantDetail(body18?: getAppMerchantDetailBody, options?: any) {
            return MerchantApiFp(configuration).getAppMerchantDetail(body18, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端商家查询(根据条件查询店铺列表)
         * @param {getAppMerchantsBody} [body17] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppMerchants(body17?: getAppMerchantsBody, options?: any) {
            return MerchantApiFp(configuration).getAppMerchants(body17, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取能使用的优惠券
         * @param {getCanUseCouponListBody} [body50] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCanUseCouponList(body50?: getCanUseCouponListBody, options?: any) {
            return MerchantApiFp(configuration).getCanUseCouponList(body50, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取城市全部（商家）分类
         * @param {getCityCategoriesBody} [body12] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityCategories(body12?: getCityCategoriesBody, options?: any) {
            return MerchantApiFp(configuration).getCityCategories(body12, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取城市推荐（商家）分类
         * @param {getCityRecommandCategoriesBody} [body9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityRecommandCategories(body9?: getCityRecommandCategoriesBody, options?: any) {
            return MerchantApiFp(configuration).getCityRecommandCategories(body9, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取评论详情
         * @param {getCommentDetailBody} [body49] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentDetail(body49?: getCommentDetailBody, options?: any) {
            return MerchantApiFp(configuration).getCommentDetail(body49, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取评论列表
         * @param {getCommentListBody} [body48] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentList(body48?: getCommentListBody, options?: any) {
            return MerchantApiFp(configuration).getCommentList(body48, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取优惠券适用商家列表
         * @param {getCouponApplyMerchantsBriefBody} [body55] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponApplyMerchantsBrief(body55?: getCouponApplyMerchantsBriefBody, options?: any) {
            return MerchantApiFp(configuration).getCouponApplyMerchantsBrief(body55, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户单日能使用的优惠券
         * @param {getDailyCanUseCouponListBody} [body51] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyCanUseCouponList(body51?: getDailyCanUseCouponListBody, options?: any) {
            return MerchantApiFp(configuration).getDailyCanUseCouponList(body51, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户券包中的过期优惠券列表
         * @param {getDiscountCouponExpireListBody} [body54] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscountCouponExpireList(body54?: getDiscountCouponExpireListBody, options?: any) {
            return MerchantApiFp(configuration).getDiscountCouponExpireList(body54, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户券包中的优惠券列表
         * @param {getDiscountCouponListBody} [body53] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscountCouponList(body53?: getDiscountCouponListBody, options?: any) {
            return MerchantApiFp(configuration).getDiscountCouponList(body53, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取商家图片信息
         * @param {getMerchantAttachmentsBody} [body20] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantAttachments(body20?: getMerchantAttachmentsBody, options?: any) {
            return MerchantApiFp(configuration).getMerchantAttachments(body20, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取商家图文详情
         * @param {getMerchantDescBody} [body19] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDesc(body19?: getMerchantDescBody, options?: any) {
            return MerchantApiFp(configuration).getMerchantDesc(body19, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取商家菜品信息
         * @param {getMerchantDishesBody} [body21] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDishes(body21?: getMerchantDishesBody, options?: any) {
            return MerchantApiFp(configuration).getMerchantDishes(body21, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取商家服务信息
         * @param {getMerchantServicesBody} [body22] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantServices(body22?: getMerchantServicesBody, options?: any) {
            return MerchantApiFp(configuration).getMerchantServices(body22, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 点赞
         * @param {Like} [like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        like(like?: Like, options?: any) {
            return MerchantApiFp(configuration).like(like, options)(fetch, basePath);
        },
    };
};

/**
 * MerchantApi - object-oriented interface
 * @export
 * @class MerchantApi
 * @extends {BaseAPI}
 */
export class MerchantApi extends BaseAPI {
    /**
     * 
     * @summary 发表评论
     * @param {Comment} [comment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public addComment(comment?: Comment, options?: any) {
        return MerchantApiFp(this.configuration).addComment(comment, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 兑换优惠券
     * @param {exchangeCouponBody} [body52] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public exchangeCoupon(body52?: exchangeCouponBody, options?: any) {
        return MerchantApiFp(this.configuration).exchangeCoupon(body52, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端商家详情查询
     * @param {getAppMerchantDetailBody} [body18] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getAppMerchantDetail(body18?: getAppMerchantDetailBody, options?: any) {
        return MerchantApiFp(this.configuration).getAppMerchantDetail(body18, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端商家查询(根据条件查询店铺列表)
     * @param {getAppMerchantsBody} [body17] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getAppMerchants(body17?: getAppMerchantsBody, options?: any) {
        return MerchantApiFp(this.configuration).getAppMerchants(body17, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取能使用的优惠券
     * @param {getCanUseCouponListBody} [body50] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getCanUseCouponList(body50?: getCanUseCouponListBody, options?: any) {
        return MerchantApiFp(this.configuration).getCanUseCouponList(body50, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取城市全部（商家）分类
     * @param {getCityCategoriesBody} [body12] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getCityCategories(body12?: getCityCategoriesBody, options?: any) {
        return MerchantApiFp(this.configuration).getCityCategories(body12, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取城市推荐（商家）分类
     * @param {getCityRecommandCategoriesBody} [body9] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getCityRecommandCategories(body9?: getCityRecommandCategoriesBody, options?: any) {
        return MerchantApiFp(this.configuration).getCityRecommandCategories(body9, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取评论详情
     * @param {getCommentDetailBody} [body49] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getCommentDetail(body49?: getCommentDetailBody, options?: any) {
        return MerchantApiFp(this.configuration).getCommentDetail(body49, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取评论列表
     * @param {getCommentListBody} [body48] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getCommentList(body48?: getCommentListBody, options?: any) {
        return MerchantApiFp(this.configuration).getCommentList(body48, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取优惠券适用商家列表
     * @param {getCouponApplyMerchantsBriefBody} [body55] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getCouponApplyMerchantsBrief(body55?: getCouponApplyMerchantsBriefBody, options?: any) {
        return MerchantApiFp(this.configuration).getCouponApplyMerchantsBrief(body55, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户单日能使用的优惠券
     * @param {getDailyCanUseCouponListBody} [body51] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getDailyCanUseCouponList(body51?: getDailyCanUseCouponListBody, options?: any) {
        return MerchantApiFp(this.configuration).getDailyCanUseCouponList(body51, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户券包中的过期优惠券列表
     * @param {getDiscountCouponExpireListBody} [body54] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getDiscountCouponExpireList(body54?: getDiscountCouponExpireListBody, options?: any) {
        return MerchantApiFp(this.configuration).getDiscountCouponExpireList(body54, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户券包中的优惠券列表
     * @param {getDiscountCouponListBody} [body53] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getDiscountCouponList(body53?: getDiscountCouponListBody, options?: any) {
        return MerchantApiFp(this.configuration).getDiscountCouponList(body53, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取商家图片信息
     * @param {getMerchantAttachmentsBody} [body20] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getMerchantAttachments(body20?: getMerchantAttachmentsBody, options?: any) {
        return MerchantApiFp(this.configuration).getMerchantAttachments(body20, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取商家图文详情
     * @param {getMerchantDescBody} [body19] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getMerchantDesc(body19?: getMerchantDescBody, options?: any) {
        return MerchantApiFp(this.configuration).getMerchantDesc(body19, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取商家菜品信息
     * @param {getMerchantDishesBody} [body21] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getMerchantDishes(body21?: getMerchantDishesBody, options?: any) {
        return MerchantApiFp(this.configuration).getMerchantDishes(body21, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取商家服务信息
     * @param {getMerchantServicesBody} [body22] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getMerchantServices(body22?: getMerchantServicesBody, options?: any) {
        return MerchantApiFp(this.configuration).getMerchantServices(body22, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 点赞
     * @param {Like} [like] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public like(like?: Like, options?: any) {
        return MerchantApiFp(this.configuration).like(like, options)(this.fetch, this.basePath);
    }

}

/**
 * OrderApi - fetch parameter creator
 * @export
 */
export const OrderApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取消订单
         * @param {cancelOrderBody} [body40] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder(body40?: cancelOrderBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/cancelOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"cancelOrderBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body40 || {}) : (body40 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除订单
         * @param {deleteOrderBody} [body39] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(body39?: deleteOrderBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/deleteOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"deleteOrderBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body39 || {}) : (body39 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户券包中的过期代金券列表
         * @param {getCashCouponExpiredListBody} [body46] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCashCouponExpiredList(body46?: getCashCouponExpiredListBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/voucherPackage/getCashCouponExpiredList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCashCouponExpiredListBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body46 || {}) : (body46 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户券包中的代金券列表
         * @param {getCashCouponListBody} [body45] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCashCouponList(body45?: getCashCouponListBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/voucherPackage/getCashCouponList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getCashCouponListBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body45 || {}) : (body45 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提交免费Plus订单
         * @param {getFreePlusBody} [body44] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFreePlus(body44?: getFreePlusBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/userPlusOrder/submitFreePlusOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getFreePlusBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body44 || {}) : (body44 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取订单详情
         * @param {getOrderDetailBody} [body35] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderDetail(body35?: getOrderDetailBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/getOrderDetail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getOrderDetailBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body35 || {}) : (body35 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取订单支付状态
         * @param {getOrderPayStatusBody} [body42] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderPayStatus(body42?: getOrderPayStatusBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/getOrderPayStatus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getOrderPayStatusBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body42 || {}) : (body42 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取订单列表
         * @param {getOrdersBody} [body34] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(body34?: getOrdersBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/getOrders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getOrdersBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body34 || {}) : (body34 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取支付方式
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayway(options: any = {}): FetchArgs {
            const localVarPath = `/order/getPayway`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取购买Plus支付状态
         * @param {getPlusOrderPayStatusBody} [body43] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlusOrderPayStatus(body43?: getPlusOrderPayStatusBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/userPlusOrder/getPlusOrderPayStatus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getPlusOrderPayStatusBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body43 || {}) : (body43 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取退款详情
         * @param {getRefundDetailBody} [body36] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundDetail(body36?: getRefundDetailBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/getRefundDetail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getRefundDetailBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body36 || {}) : (body36 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 退款列表
         * @param {getRefundListBody} [body38] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundList(body38?: getRefundListBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/getRefundList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getRefundListBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body38 || {}) : (body38 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 预支付
         * @param {prePayBody} [body41] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prePay(body41?: prePayBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/PrePay`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"prePayBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body41 || {}) : (body41 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 申请退款
         * @param {refundBody} [body37] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refund(body37?: refundBody, options: any = {}): FetchArgs {
            const localVarPath = `/order/refund`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"refundBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body37 || {}) : (body37 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 优惠买单以及plus会员买单
         * @param {SubmitOrderAndPlusMemberOrder} [submitOrderAndPlusMemberOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitOrderAndPlusMemberOrder(submitOrderAndPlusMemberOrder?: SubmitOrderAndPlusMemberOrder, options: any = {}): FetchArgs {
            const localVarPath = `/order/submitOrderAndPlusMemberOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"SubmitOrderAndPlusMemberOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(submitOrderAndPlusMemberOrder || {}) : (submitOrderAndPlusMemberOrder || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提交Plus订单
         * @param {BuyPlus} [buyPlus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitPlusOrder(buyPlus?: BuyPlus, options: any = {}): FetchArgs {
            const localVarPath = `/order/userPlusOrder/submitPlusOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"BuyPlus" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(buyPlus || {}) : (buyPlus || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提交商品订单
         * @param {SubmitProductOrder} [submitProductOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProductOrder(submitProductOrder?: SubmitProductOrder, options: any = {}): FetchArgs {
            const localVarPath = `/order/submitProductOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"SubmitProductOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(submitProductOrder || {}) : (submitProductOrder || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 优惠买单
         * @param {SubmitOrder} [submitOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProductOrder_1(submitOrder?: SubmitOrder, options: any = {}): FetchArgs {
            const localVarPath = `/order/submitOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"SubmitOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(submitOrder || {}) : (submitOrder || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取消订单
         * @param {cancelOrderBody} [body40] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder(body40?: cancelOrderBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).cancelOrder(body40, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除订单
         * @param {deleteOrderBody} [body39] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(body39?: deleteOrderBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).deleteOrder(body39, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户券包中的过期代金券列表
         * @param {getCashCouponExpiredListBody} [body46] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCashCouponExpiredList(body46?: getCashCouponExpiredListBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20029> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getCashCouponExpiredList(body46, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户券包中的代金券列表
         * @param {getCashCouponListBody} [body45] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCashCouponList(body45?: getCashCouponListBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20028> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getCashCouponList(body45, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 提交免费Plus订单
         * @param {getFreePlusBody} [body44] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFreePlus(body44?: getFreePlusBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getFreePlus(body44, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取订单详情
         * @param {getOrderDetailBody} [body35] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderDetail(body35?: getOrderDetailBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20020> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getOrderDetail(body35, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取订单支付状态
         * @param {getOrderPayStatusBody} [body42] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderPayStatus(body42?: getOrderPayStatusBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20024> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getOrderPayStatus(body42, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取订单列表
         * @param {getOrdersBody} [body34] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(body34?: getOrdersBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20020> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getOrders(body34, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取支付方式
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayway(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20027> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getPayway(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取购买Plus支付状态
         * @param {getPlusOrderPayStatusBody} [body43] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlusOrderPayStatus(body43?: getPlusOrderPayStatusBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20026> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getPlusOrderPayStatus(body43, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取退款详情
         * @param {getRefundDetailBody} [body36] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundDetail(body36?: getRefundDetailBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20021> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getRefundDetail(body36, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 退款列表
         * @param {getRefundListBody} [body38] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundList(body38?: getRefundListBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20022> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getRefundList(body38, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 预支付
         * @param {prePayBody} [body41] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prePay(body41?: prePayBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20023> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).prePay(body41, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 申请退款
         * @param {refundBody} [body37] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refund(body37?: refundBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).refund(body37, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 优惠买单以及plus会员买单
         * @param {SubmitOrderAndPlusMemberOrder} [submitOrderAndPlusMemberOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitOrderAndPlusMemberOrder(submitOrderAndPlusMemberOrder?: SubmitOrderAndPlusMemberOrder, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20019> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).submitOrderAndPlusMemberOrder(submitOrderAndPlusMemberOrder, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 提交Plus订单
         * @param {BuyPlus} [buyPlus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitPlusOrder(buyPlus?: BuyPlus, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20025> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).submitPlusOrder(buyPlus, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 提交商品订单
         * @param {SubmitProductOrder} [submitProductOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProductOrder(submitProductOrder?: SubmitProductOrder, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20019> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).submitProductOrder(submitProductOrder, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 优惠买单
         * @param {SubmitOrder} [submitOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProductOrder_1(submitOrder?: SubmitOrder, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20019> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).submitProductOrder_1(submitOrder, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 取消订单
         * @param {cancelOrderBody} [body40] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder(body40?: cancelOrderBody, options?: any) {
            return OrderApiFp(configuration).cancelOrder(body40, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除订单
         * @param {deleteOrderBody} [body39] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(body39?: deleteOrderBody, options?: any) {
            return OrderApiFp(configuration).deleteOrder(body39, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户券包中的过期代金券列表
         * @param {getCashCouponExpiredListBody} [body46] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCashCouponExpiredList(body46?: getCashCouponExpiredListBody, options?: any) {
            return OrderApiFp(configuration).getCashCouponExpiredList(body46, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户券包中的代金券列表
         * @param {getCashCouponListBody} [body45] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCashCouponList(body45?: getCashCouponListBody, options?: any) {
            return OrderApiFp(configuration).getCashCouponList(body45, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 提交免费Plus订单
         * @param {getFreePlusBody} [body44] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFreePlus(body44?: getFreePlusBody, options?: any) {
            return OrderApiFp(configuration).getFreePlus(body44, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取订单详情
         * @param {getOrderDetailBody} [body35] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderDetail(body35?: getOrderDetailBody, options?: any) {
            return OrderApiFp(configuration).getOrderDetail(body35, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取订单支付状态
         * @param {getOrderPayStatusBody} [body42] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderPayStatus(body42?: getOrderPayStatusBody, options?: any) {
            return OrderApiFp(configuration).getOrderPayStatus(body42, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取订单列表
         * @param {getOrdersBody} [body34] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(body34?: getOrdersBody, options?: any) {
            return OrderApiFp(configuration).getOrders(body34, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取支付方式
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayway(options?: any) {
            return OrderApiFp(configuration).getPayway(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取购买Plus支付状态
         * @param {getPlusOrderPayStatusBody} [body43] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlusOrderPayStatus(body43?: getPlusOrderPayStatusBody, options?: any) {
            return OrderApiFp(configuration).getPlusOrderPayStatus(body43, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取退款详情
         * @param {getRefundDetailBody} [body36] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundDetail(body36?: getRefundDetailBody, options?: any) {
            return OrderApiFp(configuration).getRefundDetail(body36, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 退款列表
         * @param {getRefundListBody} [body38] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundList(body38?: getRefundListBody, options?: any) {
            return OrderApiFp(configuration).getRefundList(body38, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 预支付
         * @param {prePayBody} [body41] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prePay(body41?: prePayBody, options?: any) {
            return OrderApiFp(configuration).prePay(body41, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 申请退款
         * @param {refundBody} [body37] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refund(body37?: refundBody, options?: any) {
            return OrderApiFp(configuration).refund(body37, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 优惠买单以及plus会员买单
         * @param {SubmitOrderAndPlusMemberOrder} [submitOrderAndPlusMemberOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitOrderAndPlusMemberOrder(submitOrderAndPlusMemberOrder?: SubmitOrderAndPlusMemberOrder, options?: any) {
            return OrderApiFp(configuration).submitOrderAndPlusMemberOrder(submitOrderAndPlusMemberOrder, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 提交Plus订单
         * @param {BuyPlus} [buyPlus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitPlusOrder(buyPlus?: BuyPlus, options?: any) {
            return OrderApiFp(configuration).submitPlusOrder(buyPlus, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 提交商品订单
         * @param {SubmitProductOrder} [submitProductOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProductOrder(submitProductOrder?: SubmitProductOrder, options?: any) {
            return OrderApiFp(configuration).submitProductOrder(submitProductOrder, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 优惠买单
         * @param {SubmitOrder} [submitOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProductOrder_1(submitOrder?: SubmitOrder, options?: any) {
            return OrderApiFp(configuration).submitProductOrder_1(submitOrder, options)(fetch, basePath);
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @summary 取消订单
     * @param {cancelOrderBody} [body40] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public cancelOrder(body40?: cancelOrderBody, options?: any) {
        return OrderApiFp(this.configuration).cancelOrder(body40, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除订单
     * @param {deleteOrderBody} [body39] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public deleteOrder(body39?: deleteOrderBody, options?: any) {
        return OrderApiFp(this.configuration).deleteOrder(body39, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户券包中的过期代金券列表
     * @param {getCashCouponExpiredListBody} [body46] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getCashCouponExpiredList(body46?: getCashCouponExpiredListBody, options?: any) {
        return OrderApiFp(this.configuration).getCashCouponExpiredList(body46, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户券包中的代金券列表
     * @param {getCashCouponListBody} [body45] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getCashCouponList(body45?: getCashCouponListBody, options?: any) {
        return OrderApiFp(this.configuration).getCashCouponList(body45, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 提交免费Plus订单
     * @param {getFreePlusBody} [body44] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getFreePlus(body44?: getFreePlusBody, options?: any) {
        return OrderApiFp(this.configuration).getFreePlus(body44, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取订单详情
     * @param {getOrderDetailBody} [body35] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrderDetail(body35?: getOrderDetailBody, options?: any) {
        return OrderApiFp(this.configuration).getOrderDetail(body35, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取订单支付状态
     * @param {getOrderPayStatusBody} [body42] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrderPayStatus(body42?: getOrderPayStatusBody, options?: any) {
        return OrderApiFp(this.configuration).getOrderPayStatus(body42, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取订单列表
     * @param {getOrdersBody} [body34] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrders(body34?: getOrdersBody, options?: any) {
        return OrderApiFp(this.configuration).getOrders(body34, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取支付方式
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getPayway(options?: any) {
        return OrderApiFp(this.configuration).getPayway(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取购买Plus支付状态
     * @param {getPlusOrderPayStatusBody} [body43] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getPlusOrderPayStatus(body43?: getPlusOrderPayStatusBody, options?: any) {
        return OrderApiFp(this.configuration).getPlusOrderPayStatus(body43, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取退款详情
     * @param {getRefundDetailBody} [body36] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getRefundDetail(body36?: getRefundDetailBody, options?: any) {
        return OrderApiFp(this.configuration).getRefundDetail(body36, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 退款列表
     * @param {getRefundListBody} [body38] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getRefundList(body38?: getRefundListBody, options?: any) {
        return OrderApiFp(this.configuration).getRefundList(body38, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 预支付
     * @param {prePayBody} [body41] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public prePay(body41?: prePayBody, options?: any) {
        return OrderApiFp(this.configuration).prePay(body41, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 申请退款
     * @param {refundBody} [body37] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public refund(body37?: refundBody, options?: any) {
        return OrderApiFp(this.configuration).refund(body37, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 优惠买单以及plus会员买单
     * @param {SubmitOrderAndPlusMemberOrder} [submitOrderAndPlusMemberOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public submitOrderAndPlusMemberOrder(submitOrderAndPlusMemberOrder?: SubmitOrderAndPlusMemberOrder, options?: any) {
        return OrderApiFp(this.configuration).submitOrderAndPlusMemberOrder(submitOrderAndPlusMemberOrder, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 提交Plus订单
     * @param {BuyPlus} [buyPlus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public submitPlusOrder(buyPlus?: BuyPlus, options?: any) {
        return OrderApiFp(this.configuration).submitPlusOrder(buyPlus, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 提交商品订单
     * @param {SubmitProductOrder} [submitProductOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public submitProductOrder(submitProductOrder?: SubmitProductOrder, options?: any) {
        return OrderApiFp(this.configuration).submitProductOrder(submitProductOrder, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 优惠买单
     * @param {SubmitOrder} [submitOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public submitProductOrder_1(submitOrder?: SubmitOrder, options?: any) {
        return OrderApiFp(this.configuration).submitProductOrder_1(submitOrder, options)(this.fetch, this.basePath);
    }

}

/**
 * PointsMallApi - fetch parameter creator
 * @export
 */
export const PointsMallApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取访问积分商城的url
         * @param {getDuibaAccessUrlBody} [body56] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDuibaAccessUrl(body56?: getDuibaAccessUrlBody, options: any = {}): FetchArgs {
            const localVarPath = `/getDuibaAccessUrl`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getDuibaAccessUrlBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body56 || {}) : (body56 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PointsMallApi - functional programming interface
 * @export
 */
export const PointsMallApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取访问积分商城的url
         * @param {getDuibaAccessUrlBody} [body56] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDuibaAccessUrl(body56?: getDuibaAccessUrlBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20039> {
            const localVarFetchArgs = PointsMallApiFetchParamCreator(configuration).getDuibaAccessUrl(body56, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PointsMallApi - factory interface
 * @export
 */
export const PointsMallApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 获取访问积分商城的url
         * @param {getDuibaAccessUrlBody} [body56] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDuibaAccessUrl(body56?: getDuibaAccessUrlBody, options?: any) {
            return PointsMallApiFp(configuration).getDuibaAccessUrl(body56, options)(fetch, basePath);
        },
    };
};

/**
 * PointsMallApi - object-oriented interface
 * @export
 * @class PointsMallApi
 * @extends {BaseAPI}
 */
export class PointsMallApi extends BaseAPI {
    /**
     * 
     * @summary 获取访问积分商城的url
     * @param {getDuibaAccessUrlBody} [body56] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PointsMallApi
     */
    public getDuibaAccessUrl(body56?: getDuibaAccessUrlBody, options?: any) {
        return PointsMallApiFp(this.configuration).getDuibaAccessUrl(body56, options)(this.fetch, this.basePath);
    }

}

/**
 * ProductApi - fetch parameter creator
 * @export
 */
export const ProductApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端获取商品简述
         * @param {getProductBriefBody} [body28] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductBrief(body28?: getProductBriefBody, options: any = {}): FetchArgs {
            const localVarPath = `/getProductBrief`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getProductBriefBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body28 || {}) : (body28 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取商品内容
         * @param {getProductContentsBody} [body30] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductContents(body30?: getProductContentsBody, options: any = {}): FetchArgs {
            const localVarPath = `/getProductContents`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getProductContentsBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body30 || {}) : (body30 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取商品详情
         * @param {getProductDetailBody} [body29] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDetail(body29?: getProductDetailBody, options: any = {}): FetchArgs {
            const localVarPath = `/getProductDetail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getProductDetailBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body29 || {}) : (body29 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端商品查询
         * @param {getProductsBody} [body27] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(body27?: getProductsBody, options: any = {}): FetchArgs {
            const localVarPath = `/getProducts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getProductsBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body27 || {}) : (body27 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端获取商品简述
         * @param {getProductBriefBody} [body28] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductBrief(body28?: getProductBriefBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ProductApiFetchParamCreator(configuration).getProductBrief(body28, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取商品内容
         * @param {getProductContentsBody} [body30] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductContents(body30?: getProductContentsBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ProductApiFetchParamCreator(configuration).getProductContents(body30, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取商品详情
         * @param {getProductDetailBody} [body29] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDetail(body29?: getProductDetailBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ProductApiFetchParamCreator(configuration).getProductDetail(body29, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端商品查询
         * @param {getProductsBody} [body27] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(body27?: getProductsBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20016> {
            const localVarFetchArgs = ProductApiFetchParamCreator(configuration).getProducts(body27, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary APP端获取商品简述
         * @param {getProductBriefBody} [body28] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductBrief(body28?: getProductBriefBody, options?: any) {
            return ProductApiFp(configuration).getProductBrief(body28, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取商品内容
         * @param {getProductContentsBody} [body30] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductContents(body30?: getProductContentsBody, options?: any) {
            return ProductApiFp(configuration).getProductContents(body30, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取商品详情
         * @param {getProductDetailBody} [body29] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDetail(body29?: getProductDetailBody, options?: any) {
            return ProductApiFp(configuration).getProductDetail(body29, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端商品查询
         * @param {getProductsBody} [body27] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(body27?: getProductsBody, options?: any) {
            return ProductApiFp(configuration).getProducts(body27, options)(fetch, basePath);
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @summary APP端获取商品简述
     * @param {getProductBriefBody} [body28] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductBrief(body28?: getProductBriefBody, options?: any) {
        return ProductApiFp(this.configuration).getProductBrief(body28, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取商品内容
     * @param {getProductContentsBody} [body30] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductContents(body30?: getProductContentsBody, options?: any) {
        return ProductApiFp(this.configuration).getProductContents(body30, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取商品详情
     * @param {getProductDetailBody} [body29] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductDetail(body29?: getProductDetailBody, options?: any) {
        return ProductApiFp(this.configuration).getProductDetail(body29, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端商品查询
     * @param {getProductsBody} [body27] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProducts(body27?: getProductsBody, options?: any) {
        return ProductApiFp(this.configuration).getProducts(body27, options)(this.fetch, this.basePath);
    }

}

/**
 * SystemConfigApi - fetch parameter creator
 * @export
 */
export const SystemConfigApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取应用最新版本
         * @param {getAppNewestVersionBody} [body57] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppNewestVersion(body57?: getAppNewestVersionBody, options: any = {}): FetchArgs {
            const localVarPath = `/getAppNewestVersion`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getAppNewestVersionBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body57 || {}) : (body57 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemConfigApi - functional programming interface
 * @export
 */
export const SystemConfigApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取应用最新版本
         * @param {getAppNewestVersionBody} [body57] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppNewestVersion(body57?: getAppNewestVersionBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20040> {
            const localVarFetchArgs = SystemConfigApiFetchParamCreator(configuration).getAppNewestVersion(body57, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SystemConfigApi - factory interface
 * @export
 */
export const SystemConfigApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 获取应用最新版本
         * @param {getAppNewestVersionBody} [body57] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppNewestVersion(body57?: getAppNewestVersionBody, options?: any) {
            return SystemConfigApiFp(configuration).getAppNewestVersion(body57, options)(fetch, basePath);
        },
    };
};

/**
 * SystemConfigApi - object-oriented interface
 * @export
 * @class SystemConfigApi
 * @extends {BaseAPI}
 */
export class SystemConfigApi extends BaseAPI {
    /**
     * 
     * @summary 获取应用最新版本
     * @param {getAppNewestVersionBody} [body57] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemConfigApi
     */
    public getAppNewestVersion(body57?: getAppNewestVersionBody, options?: any) {
        return SystemConfigApiFp(this.configuration).getAppNewestVersion(body57, options)(this.fetch, this.basePath);
    }

}

/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加地址
         * @param {AddAddress} [addAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddress(addAddress?: AddAddress, options: any = {}): FetchArgs {
            const localVarPath = `/user/addAddress`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"AddAddress" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(addAddress || {}) : (addAddress || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 绑定手机号码
         * @param {bindMobileBody} [body32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindMobile(body32?: bindMobileBody, options: any = {}): FetchArgs {
            const localVarPath = `/bindMobile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"bindMobileBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body32 || {}) : (body32 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 绑定新手机号码
         * @param {bindNewPhoneBody} [body6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindNewPhone(body6?: bindNewPhoneBody, options: any = {}): FetchArgs {
            const localVarPath = `/user/bindNewPhone`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"bindNewPhoneBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body6 || {}) : (body6 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 绑定微信
         * @param {bindWechatBody} [body33] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindWechat(body33?: bindWechatBody, options: any = {}): FetchArgs {
            const localVarPath = `/user/bindWechat`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"bindWechatBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body33 || {}) : (body33 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除地址
         * @param {deleteAddressBody} [body4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddress(body4?: deleteAddressBody, options: any = {}): FetchArgs {
            const localVarPath = `/user/deleteAddress`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"deleteAddressBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body4 || {}) : (body4 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查看地址
         * @param {getAddressBody} [body3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress(body3?: getAddressBody, options: any = {}): FetchArgs {
            const localVarPath = `/user/getAddress`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getAddressBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body3 || {}) : (body3 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户所有地址
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses(options: any = {}): FetchArgs {
            const localVarPath = `/user/getAddresses`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取可开通Plus会员类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlusMemberType(options: any = {}): FetchArgs {
            const localVarPath = `/user/userPlus/getPlusMemberType`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取积分列表
         * @param {getPointsListBody} [body10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointsList(body10?: getPointsListBody, options: any = {}): FetchArgs {
            const localVarPath = `/user/userPoint/getPointsList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getPointsListBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body10 || {}) : (body10 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(options: any = {}): FetchArgs {
            const localVarPath = `/user/getUserInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取验证码
         * @param {Body} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerifyCode(body?: Body, options: any = {}): FetchArgs {
            const localVarPath = `/app/getVerifyCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"Body" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加用户积分
         * @param {increaseUserPointsBody} [body11] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        increaseUserPoints(body11?: increaseUserPointsBody, options: any = {}): FetchArgs {
            const localVarPath = `/user/userPoint/increaseUserPoints`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"increaseUserPointsBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body11 || {}) : (body11 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户登录、注册
         * @param {any} [UNKNOWN_BASE_TYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(UNKNOWN_BASE_TYPE?: any, options: any = {}): FetchArgs {
            const localVarPath = `/app/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(UNKNOWN_BASE_TYPE || {}) : (UNKNOWN_BASE_TYPE || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户退出登录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options: any = {}): FetchArgs {
            const localVarPath = `/app/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 重置登录密码
         * @param {getAddressupdateUserInfoBody} [body31] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetLoginPassword(body31?: any, options: any = {}): FetchArgs {
            const localVarPath = `/resetLoginPassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"getAddressupdateUserInfoBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body31 || {}) : (body31 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户签到
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign(options: any = {}): FetchArgs {
            const localVarPath = `/user/sign`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 解绑微信
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBindWechat(options: any = {}): FetchArgs {
            const localVarPath = `/user/unBindWechat`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改地址
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(address?: Address, options: any = {}): FetchArgs {
            const localVarPath = `/user/updateAddress`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"Address" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(address || {}) : (address || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改密码
         * @param {updateLoginPasswordBody} [body2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLoginPassword(body2?: updateLoginPasswordBody, options: any = {}): FetchArgs {
            const localVarPath = `/user/updateLoginPassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"updateLoginPasswordBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body2 || {}) : (body2 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改用户信息
         * @param {updateUserInfoBody} [body1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserInfo(body1?: updateUserInfoBody, options: any = {}): FetchArgs {
            const localVarPath = `/user/updateUserInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"updateUserInfoBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body1 || {}) : (body1 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新用户头像
         * @param {uploadHeadImageBody} [body7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadHeadImage(body7?: uploadHeadImageBody, options: any = {}): FetchArgs {
            const localVarPath = `/user/uploadHeadImage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"uploadHeadImageBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body7 || {}) : (body7 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 验证旧手机验证码
         * @param {verifyOldPhoneCodeBody} [body5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOldPhoneCode(body5?: verifyOldPhoneCodeBody, options: any = {}): FetchArgs {
            const localVarPath = `/user/verifyOldPhoneCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            
            const myHeaders = configuration ? (configuration.headers || {}) : {};
            localVarRequestOptions.headers = Object.assign(myHeaders, localVarHeaderParameter, options.headers);
        
            const needsSerialization = (<any>"verifyOldPhoneCodeBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body5 || {}) : (body5 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加地址
         * @param {AddAddress} [addAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddress(addAddress?: AddAddress, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).addAddress(addAddress, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 绑定手机号码
         * @param {bindMobileBody} [body32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindMobile(body32?: bindMobileBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).bindMobile(body32, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 绑定新手机号码
         * @param {bindNewPhoneBody} [body6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindNewPhone(body6?: bindNewPhoneBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).bindNewPhone(body6, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 绑定微信
         * @param {bindWechatBody} [body33] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindWechat(body33?: bindWechatBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).bindWechat(body33, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除地址
         * @param {deleteAddressBody} [body4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddress(body4?: deleteAddressBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).deleteAddress(body4, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 查看地址
         * @param {getAddressBody} [body3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress(body3?: getAddressBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getAddress(body3, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户所有地址
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getAddresses(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取可开通Plus会员类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlusMemberType(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20017> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getPlusMemberType(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取积分列表
         * @param {getPointsListBody} [body10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointsList(body10?: getPointsListBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2002> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getPointsList(body10, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserInfo(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取验证码
         * @param {Body} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerifyCode(body?: Body, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getVerifyCode(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 增加用户积分
         * @param {increaseUserPointsBody} [body11] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        increaseUserPoints(body11?: increaseUserPointsBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2003> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).increaseUserPoints(body11, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 用户登录、注册
         * @param {any} [UNKNOWN_BASE_TYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(UNKNOWN_BASE_TYPE?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).login(UNKNOWN_BASE_TYPE, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 用户退出登录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).logout(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 重置登录密码
         * @param {getAddressupdateUserInfoBody} [body31] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetLoginPassword(body31?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).resetLoginPassword(body31, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 用户签到
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).sign(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 解绑微信
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBindWechat(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).unBindWechat(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 修改地址
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(address?: Address, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateAddress(address, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 修改密码
         * @param {updateLoginPasswordBody} [body2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLoginPassword(body2?: updateLoginPasswordBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateLoginPassword(body2, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 修改用户信息
         * @param {updateUserInfoBody} [body1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserInfo(body1?: updateUserInfoBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateUserInfo(body1, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 更新用户头像
         * @param {uploadHeadImageBody} [body7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadHeadImage(body7?: uploadHeadImageBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).uploadHeadImage(body7, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 验证旧手机验证码
         * @param {verifyOldPhoneCodeBody} [body5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOldPhoneCode(body5?: verifyOldPhoneCodeBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).verifyOldPhoneCode(body5, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 添加地址
         * @param {AddAddress} [addAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddress(addAddress?: AddAddress, options?: any) {
            return UserApiFp(configuration).addAddress(addAddress, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 绑定手机号码
         * @param {bindMobileBody} [body32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindMobile(body32?: bindMobileBody, options?: any) {
            return UserApiFp(configuration).bindMobile(body32, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 绑定新手机号码
         * @param {bindNewPhoneBody} [body6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindNewPhone(body6?: bindNewPhoneBody, options?: any) {
            return UserApiFp(configuration).bindNewPhone(body6, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 绑定微信
         * @param {bindWechatBody} [body33] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindWechat(body33?: bindWechatBody, options?: any) {
            return UserApiFp(configuration).bindWechat(body33, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除地址
         * @param {deleteAddressBody} [body4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddress(body4?: deleteAddressBody, options?: any) {
            return UserApiFp(configuration).deleteAddress(body4, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 查看地址
         * @param {getAddressBody} [body3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress(body3?: getAddressBody, options?: any) {
            return UserApiFp(configuration).getAddress(body3, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户所有地址
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses(options?: any) {
            return UserApiFp(configuration).getAddresses(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取可开通Plus会员类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlusMemberType(options?: any) {
            return UserApiFp(configuration).getPlusMemberType(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取积分列表
         * @param {getPointsListBody} [body10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointsList(body10?: getPointsListBody, options?: any) {
            return UserApiFp(configuration).getPointsList(body10, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(options?: any) {
            return UserApiFp(configuration).getUserInfo(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取验证码
         * @param {Body} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerifyCode(body?: Body, options?: any) {
            return UserApiFp(configuration).getVerifyCode(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 增加用户积分
         * @param {increaseUserPointsBody} [body11] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        increaseUserPoints(body11?: increaseUserPointsBody, options?: any) {
            return UserApiFp(configuration).increaseUserPoints(body11, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 用户登录、注册
         * @param {any} [UNKNOWN_BASE_TYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(UNKNOWN_BASE_TYPE?: any, options?: any) {
            return UserApiFp(configuration).login(UNKNOWN_BASE_TYPE, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 用户退出登录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any) {
            return UserApiFp(configuration).logout(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 重置登录密码
         * @param {getAddressupdateUserInfoBody} [body31] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetLoginPassword(body31?: any, options?: any) {
            return UserApiFp(configuration).resetLoginPassword(body31, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 用户签到
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign(options?: any) {
            return UserApiFp(configuration).sign(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 解绑微信
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBindWechat(options?: any) {
            return UserApiFp(configuration).unBindWechat(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 修改地址
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(address?: Address, options?: any) {
            return UserApiFp(configuration).updateAddress(address, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 修改密码
         * @param {updateLoginPasswordBody} [body2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLoginPassword(body2?: updateLoginPasswordBody, options?: any) {
            return UserApiFp(configuration).updateLoginPassword(body2, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 修改用户信息
         * @param {updateUserInfoBody} [body1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserInfo(body1?: updateUserInfoBody, options?: any) {
            return UserApiFp(configuration).updateUserInfo(body1, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 更新用户头像
         * @param {uploadHeadImageBody} [body7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadHeadImage(body7?: uploadHeadImageBody, options?: any) {
            return UserApiFp(configuration).uploadHeadImage(body7, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 验证旧手机验证码
         * @param {verifyOldPhoneCodeBody} [body5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOldPhoneCode(body5?: verifyOldPhoneCodeBody, options?: any) {
            return UserApiFp(configuration).verifyOldPhoneCode(body5, options)(fetch, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary 添加地址
     * @param {AddAddress} [addAddress] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public addAddress(addAddress?: AddAddress, options?: any) {
        return UserApiFp(this.configuration).addAddress(addAddress, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 绑定手机号码
     * @param {bindMobileBody} [body32] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public bindMobile(body32?: bindMobileBody, options?: any) {
        return UserApiFp(this.configuration).bindMobile(body32, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 绑定新手机号码
     * @param {bindNewPhoneBody} [body6] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public bindNewPhone(body6?: bindNewPhoneBody, options?: any) {
        return UserApiFp(this.configuration).bindNewPhone(body6, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 绑定微信
     * @param {bindWechatBody} [body33] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public bindWechat(body33?: bindWechatBody, options?: any) {
        return UserApiFp(this.configuration).bindWechat(body33, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除地址
     * @param {deleteAddressBody} [body4] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteAddress(body4?: deleteAddressBody, options?: any) {
        return UserApiFp(this.configuration).deleteAddress(body4, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 查看地址
     * @param {getAddressBody} [body3] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAddress(body3?: getAddressBody, options?: any) {
        return UserApiFp(this.configuration).getAddress(body3, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户所有地址
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAddresses(options?: any) {
        return UserApiFp(this.configuration).getAddresses(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取可开通Plus会员类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getPlusMemberType(options?: any) {
        return UserApiFp(this.configuration).getPlusMemberType(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取积分列表
     * @param {getPointsListBody} [body10] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getPointsList(body10?: getPointsListBody, options?: any) {
        return UserApiFp(this.configuration).getPointsList(body10, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserInfo(options?: any) {
        return UserApiFp(this.configuration).getUserInfo(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取验证码
     * @param {Body} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getVerifyCode(body?: Body, options?: any) {
        return UserApiFp(this.configuration).getVerifyCode(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 增加用户积分
     * @param {increaseUserPointsBody} [body11] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public increaseUserPoints(body11?: increaseUserPointsBody, options?: any) {
        return UserApiFp(this.configuration).increaseUserPoints(body11, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 用户登录、注册
     * @param {any} [UNKNOWN_BASE_TYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public login(UNKNOWN_BASE_TYPE?: any, options?: any) {
        return UserApiFp(this.configuration).login(UNKNOWN_BASE_TYPE, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 用户退出登录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public logout(options?: any) {
        return UserApiFp(this.configuration).logout(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 重置登录密码
     * @param {getAddressupdateUserInfoBody} [body31] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public resetLoginPassword(body31?: any, options?: any) {
        return UserApiFp(this.configuration).resetLoginPassword(body31, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 用户签到
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sign(options?: any) {
        return UserApiFp(this.configuration).sign(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 解绑微信
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public unBindWechat(options?: any) {
        return UserApiFp(this.configuration).unBindWechat(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 修改地址
     * @param {Address} [address] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateAddress(address?: Address, options?: any) {
        return UserApiFp(this.configuration).updateAddress(address, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 修改密码
     * @param {updateLoginPasswordBody} [body2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateLoginPassword(body2?: updateLoginPasswordBody, options?: any) {
        return UserApiFp(this.configuration).updateLoginPassword(body2, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 修改用户信息
     * @param {updateUserInfoBody} [body1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserInfo(body1?: updateUserInfoBody, options?: any) {
        return UserApiFp(this.configuration).updateUserInfo(body1, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 更新用户头像
     * @param {uploadHeadImageBody} [body7] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public uploadHeadImage(body7?: uploadHeadImageBody, options?: any) {
        return UserApiFp(this.configuration).uploadHeadImage(body7, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 验证旧手机验证码
     * @param {verifyOldPhoneCodeBody} [body5] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public verifyOldPhoneCode(body5?: verifyOldPhoneCodeBody, options?: any) {
        return UserApiFp(this.configuration).verifyOldPhoneCode(body5, options)(this.fetch, this.basePath);
    }

}

